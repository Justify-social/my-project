// AUTO-GENERATED by scripts/generate-preview-pages.ts - DO NOT EDIT MANUALLY!
// Timestamp: 2025-04-09T22:15:17.835Z

'use client'; // Required for state management (e.g., view switching)
import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { cn } from '@/lib/utils';
import { Badge } from '@/components/ui/badge';
import { CalendarUpcoming, CalendarEvent } from '@/components/ui/calendar-upcoming';
import { useToast } from '@/hooks/use-toast'; // Add toast for click feedback

const statusStyles: Record<string, string> = {
  stable: 'bg-green-100 text-green-800 border-green-200',
  beta: 'bg-yellow-100 text-yellow-800 border-yellow-200',
  deprecated: 'bg-red-100 text-red-800 border-red-200',
  development: 'bg-blue-100 text-blue-800 border-blue-200',
};

export default function CalendarUpcomingPreviewPage() {
  const { toast } = useToast();
  const [events, setEvents] = useState<CalendarEvent[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Fetch data from the API route
  useEffect(() => {
    setIsLoading(true);
    setError(null);
    fetch('/api/debug/calendar-events')
      .then(res => {
        if (!res.ok) {
          throw new Error(`Failed to fetch events: ${res.statusText}`);
        }
        return res.json();
      })
      .then(data => {
        if (!data.events) {
          throw new Error('API response missing events data');
        }
        // Dates from JSON need conversion back to Date objects
        const fetchedEvents = data.events.map((event: any) => ({
          ...event,
          start: new Date(event.start),
          end: event.end ? new Date(event.end) : undefined,
        }));
        setEvents(fetchedEvents);
      })
      .catch(err => {
        console.error('Error fetching calendar data:', err);
        setError(err.message || 'Failed to load calendar data.');
        setEvents([]); // Clear events on error
      })
      .finally(() => {
        setIsLoading(false);
      });
  }, []);

  const handleEventClick = (eventId: string | number, event: CalendarEvent) => {
    toast({
      title: 'Event Clicked',
      description: `ID: ${eventId}, Title: ${event.title}`,
    });
    console.log('Event clicked:', eventId, event);
  };

  const componentMeta = {
    name: 'CalendarUpcoming',
    description: 'Displays upcoming campaign events in a calendar grid.',
    category: 'organism',
    subcategory: 'calendar',
    renderType: 'client',
    status: 'stable', // Added status
    author: 'Your Name/Team', // Added author
    since: '2024-02-01', // Added since date (example)
  };
  // const examples: string[] = []; // Removed examples array

  return (
    <div className="container mx-auto px-4 py-8">
      {/* Breadcrumbs */}
      <nav aria-label="Breadcrumb" className="mb-6 text-sm text-secondary">
        <ol className="list-none p-0 inline-flex space-x-2">
          <li className="flex items-center">
            <Link href="/debug-tools/ui-components" className="hover:text-Interactive">
              UI Components
            </Link>
          </li>
          <li className="flex items-center">
            <span className="mx-2">/</span>
            <span className="capitalize">{componentMeta.category}</span>
          </li>
          {componentMeta.subcategory && (
            <li className="flex items-center">
              <span className="mx-2">/</span>
              <span className="capitalize">{componentMeta.subcategory}</span>
            </li>
          )}
          <li className="flex items-center">
            <span className="mx-2">/</span>
            <span className="font-medium text-primary">{componentMeta.name}</span>
          </li>
        </ol>
      </nav>

      {/* Header Section */}
      <div className="mb-8 border-b border-divider pb-4">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
          <h1 className="text-3xl font-bold text-primary mb-2 sm:mb-0">{componentMeta.name}</h1>
          <div className="flex items-center space-x-3 text-sm">
            {componentMeta.status && (
              <Badge
                variant="outline"
                className={cn(
                  'font-medium',
                  statusStyles[componentMeta.status] || statusStyles.development
                )}
              >
                {componentMeta.status}
              </Badge>
            )}
            <span className="text-secondary capitalize">({componentMeta.renderType || 'N/A'})</span>
          </div>
        </div>
        {componentMeta.description && (
          <p className="mt-2 text-secondary max-w-3xl">{componentMeta.description}</p>
        )}
        <div className="mt-3 flex flex-wrap gap-x-6 gap-y-1 text-xs text-muted-foreground">
          {componentMeta.author && <span>Author: {componentMeta.author}</span>}
          {componentMeta.since && <span>Since: {componentMeta.since}</span>}
        </div>
      </div>

      {/* Examples Section (Rendering the actual component) */}
      <div className="mb-8">
        <h2 className="text-xl font-semibold mb-4 text-primary">Examples / Usage</h2>
        <div className="space-y-6">
          {/* ---- Updated Rendering Example ---- */}
          <div className="border border-divider rounded-lg p-4 bg-card shadow-sm">
            {' '}
            {/* Added padding/bg/shadow */}
            <h3 className="text-lg font-medium mb-4">Interactive Calendar</h3> {/* Updated title */}
            {/* Added container with explicit height and border for visibility */}
            <div className="h-[75vh] min-h-[600px] w-full border border-dashed border-muted-foreground/30 p-1 rounded-md">
              {isLoading && (
                <p className="text-center text-muted-foreground p-4">Loading events...</p>
              )}
              {error && <p className="text-center text-red-600 p-4">Error: {error}</p>}
              {!isLoading && !error && (
                <CalendarUpcoming events={events} onEventClick={handleEventClick} />
              )}
            </div>
          </div>
          {/* ---- END UPDATED EXAMPLE ---- */}
        </div>
      </div>

      {/* Code Snippets Section - Removed */}
      {/* {examples && examples.length > 0 && ( ... )} */}
    </div>
  );
}
