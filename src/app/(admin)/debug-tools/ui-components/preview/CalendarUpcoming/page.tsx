// AUTO-GENERATED by scripts/generate-preview-pages.ts - DO NOT EDIT MANUALLY!
// Timestamp: 2025-04-09T22:15:17.835Z

"use client" // Required for state management (e.g., view switching)
import React from 'react';
import Link from 'next/link';
import { cn } from '@/lib/utils';
import { Badge } from "@/components/ui/badge";
import { CalendarUpcoming } from '@/components/ui/calendar-upcoming'; // Don't import CalendarEvent

// Define a local type mirroring the expected structure
interface PreviewCalendarEvent {
  id: number | string;
  title: string;
  start: Date;
  end?: Date;
  platform?: string;
  budget?: number;
  kpi?: string;
  status?: string;
  allDay?: boolean; // Added from previous sample data
}

// Sample Data
const sampleEvents: PreviewCalendarEvent[] = [ // Use local type
  {
    id: '1',
    title: 'Summer Sale Launch',
    start: new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() + 2, 10, 0),
    end: new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() + 2, 12, 0),
    platform: 'Facebook',
    status: 'Scheduled',
  },
  {
    id: '2',
    title: 'Influencer Collab Post',
    start: new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() + 5),
    allDay: true,
    platform: 'Instagram',
    status: 'Draft',
  },
  {
    id: '3',
    title: 'Holiday Campaign Kick-off Meeting Holiday Campaign Kick-off Meeting Holiday Campaign Kick-off Meeting ',
    start: new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() + 7, 9, 0),
    end: new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() + 7, 10, 30),
    platform: 'Internal',
    status: 'Confirmed',
  },
  {
    id: '4',
    title: 'Product Photoshoot',
    start: new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() + 10, 13, 0),
    end: new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() + 10, 17, 0),
    platform: 'Internal',
    status: 'Planning',
  },
  // Add more events as needed
];

const statusStyles: Record<string, string> = {
  stable: 'bg-green-100 text-green-800 border-green-200',
  beta: 'bg-yellow-100 text-yellow-800 border-yellow-200',
  deprecated: 'bg-red-100 text-red-800 border-red-200',
  development: 'bg-blue-100 text-blue-800 border-blue-200',
};

export default function CalendarUpcomingPreviewPage() {
  const componentMeta = {
    "name": "CalendarUpcoming",
    "description": "Displays upcoming campaign events in a calendar grid or timeline view.",
    "category": "organism",
    "subcategory": "calendar",
    "renderType": "client",
    "status": "stable", // Added status
    "author": "Your Name/Team", // Added author
    "since": "2024-02-01" // Added since date (example)
  };
  // const examples: string[] = []; // Removed examples array

  return (
    <div className="container mx-auto px-4 py-8">
      {/* Breadcrumbs */}
      <nav aria-label="Breadcrumb" className="mb-6 text-sm text-secondary">
        <ol className="list-none p-0 inline-flex space-x-2">
          <li className="flex items-center"><Link href="/debug-tools/ui-components" className="hover:text-Interactive">UI Components</Link></li>
          <li className="flex items-center"><span className="mx-2">/</span><span className="capitalize">{componentMeta.category}</span></li>
          {componentMeta.subcategory && <li className="flex items-center"><span className="mx-2">/</span><span className="capitalize">{componentMeta.subcategory}</span></li>}
          <li className="flex items-center"><span className="mx-2">/</span><span className="font-medium text-primary">{componentMeta.name}</span></li>
        </ol>
      </nav>

      {/* Header Section */}
      <div className="mb-8 border-b border-divider pb-4">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
          <h1 className="text-3xl font-bold text-primary mb-2 sm:mb-0">{componentMeta.name}</h1>
          <div className="flex items-center space-x-3 text-sm">
            {componentMeta.status && (
              <Badge variant="outline" className={cn('font-medium', statusStyles[componentMeta.status] || statusStyles.development)}>{componentMeta.status}</Badge>
            )}
            <span className="text-secondary capitalize">({componentMeta.renderType || 'N/A'})</span>
          </div>
        </div>
        {componentMeta.description && <p className="mt-2 text-secondary max-w-3xl">{componentMeta.description}</p>}
        <div className="mt-3 flex flex-wrap gap-x-6 gap-y-1 text-xs text-muted-foreground">
          {componentMeta.author && <span>Author: {componentMeta.author}</span>}
          {componentMeta.since && <span>Since: {componentMeta.since}</span>}
        </div>
      </div>

      {/* Examples Section (Rendering the actual component) */}
      <div className="mb-8">
        <h2 className="text-xl font-semibold mb-4 text-primary">Examples / Usage</h2>
        <div className="space-y-6">
          {/* ---- ADD YOUR RENDERING EXAMPLES MANUALLY BELOW ---- */}

          {/* Example 1: Default View (Month) */}
          <div className="border border-divider rounded-lg p-6">
            <h3 className="text-lg font-medium mb-3">Default View (Month)</h3>
            {/* We might need a container with a fixed height for better preview */}
            <div style={{ height: '70vh', minHeight: '600px' }}>
              <CalendarUpcoming events={sampleEvents} />
            </div>
          </div>

          {/* Example 2: Rendered Component */}
          {/* The component manages its own view state, so we just render it */}
          <div className="border border-divider rounded-lg p-6">
            <h3 className="text-lg font-medium mb-3">Rendered Calendar</h3>
            <div style={{ height: '70vh', minHeight: '600px' }}>
              <CalendarUpcoming events={sampleEvents} />
              {/* Removed initialView prop */}
            </div>
          </div>

          {/* ---- END MANUAL EXAMPLES ---- */}
        </div>
      </div>

      {/* Code Snippets Section - Removed */}
      {/* {examples && examples.length > 0 && ( ... )} */}

    </div>
  );
}
