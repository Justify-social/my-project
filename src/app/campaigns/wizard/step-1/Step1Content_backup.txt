"use client";

import React, { useState, useEffect, useMemo } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { Formik, Form, Field, ErrorMessage, FieldArray } from "formik";
import * as Yup from "yup";
import { useWizard } from "@/context/WizardContext";
import ProgressBar from "@/components/Wizard/ProgressBar";
import { toast } from "react-hot-toast";
import { LoadingSpinner } from "@/components/ui/loading-spinner";
import debounce from "lodash/debounce";
import {
  CalendarIcon,
  ChevronDownIcon,
  UserCircleIcon,
  CurrencyDollarIcon,
  GlobeAltIcon,
  PlusCircleIcon,
  BriefcaseIcon,
  ClockIcon,
  EnvelopeIcon,
  BuildingOfficeIcon,
} from "@heroicons/react/24/outline";

// Client-safe environment variables only
const IPGEOLOCATION_API_KEY = process.env.NEXT_PUBLIC_IPGEOLOCATION_API_KEY || "";
const EXCHANGERATES_API_KEY = process.env.NEXT_PUBLIC_EXCHANGERATES_API_KEY || "";

// Western Currencies with Country Names
const westernCurrencies = [
  { country: "United States", code: "USD" },
  { country: "Eurozone", code: "EUR" },
  { country: "United Kingdom", code: "GBP" },
  { country: "Canada", code: "CAD" },
  { country: "Switzerland", code: "CHF" },
  { country: "Sweden", code: "SEK" },
  { country: "Norway", code: "NOK" },
  { country: "Denmark", code: "DKK" },
  { country: "Australia", code: "AUD" },
];

// Validation Schema
const OverviewSchema = Yup.object().shape({
  name: Yup.string().required("Campaign name is required"),
  businessGoal: Yup.string()
    .max(3000, "Maximum 3000 characters")
    .required("Business goal is required"),
  startDate: Yup.string().required("Start date is required"),
  startTime: Yup.string().required("Start time is required"),
  endDate: Yup.string().required("End date is required"),
  endTime: Yup.string().required("End time is required"),
  timeZone: Yup.string().required("Time zone is required"),
  contacts: Yup.array()
    .of(
      Yup.object().shape({
        firstName: Yup.string().required("First name is required"),
        surname: Yup.string().required("Surname is required"),
        email: Yup.string()
          .email("Invalid email")
          .required("Email is required")
          .test(
            "email-format",
            "Invalid email format",
            (value) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value || "")
          ),
        position: Yup.string().required("Position is required"),
      })
    )
    .min(1, "At least one contact is required"),
  currency: Yup.string().required("Currency is required"),
  totalBudget: Yup.number()
    .min(0, "Budget must be positive")
    .required("Total campaign budget is required"),
  socialMediaBudget: Yup.number()
    .min(0, "Budget must be positive")
    .required("Social media budget is required"),
  platform: Yup.string().required("Platform is required"),
  influencerHandle: Yup.string().required("Influencer handle is required"),
}).test(
  "date-time-validation",
  "End date/time must be after start date/time",
  function (values) {
    const { startDate, startTime, endDate, endTime } = values;
    if (!startDate || !startTime || !endDate || !endTime) return true;
    const start = new Date(`${startDate}T${startTime}:00Z`);
    const end = new Date(`${endDate}T${endTime}:00Z`);
    return end > start;
  }
);

interface FormValues {
  name: string;
  businessGoal: string;
  startDate: string;
  startTime: string;
  endDate: string;
  endTime: string;
  timeZone: string;
  contacts: Array<{
    firstName: string;
    surname: string;
    email: string;
    position: string;
  }>;
  currency: string;
  totalBudget: number;
  socialMediaBudget: number;
  platform: string;
  influencerHandle: string;
}

const defaultFormValues: FormValues = {
  name: "",
  businessGoal: "",
  startDate: "",
  startTime: "00:00",
  endDate: "",
  endTime: "00:00",
  timeZone: "",
  contacts: [{ firstName: "", surname: "", email: "", position: "" }],
  currency: "",
  totalBudget: 0,
  socialMediaBudget: 0,
  platform: "",
  influencerHandle: "",
};

const StyledField = ({
  label,
  name,
  type = "text",
  as,
  children,
  required = false,
  icon,
  ...props
}: any) => (
  <div className="mb-5">
    <label htmlFor={name} className="block text-sm font-medium text-gray-700 mb-2">
      {label}
      {required && <span className="text-blue-500 ml-1">*</span>}
    </label>
    <div className="relative">
      {icon && <div className="absolute left-3 top-2.5 text-gray-400">{icon}</div>}
      {as ? (
        <Field
          as={as}
          id={name}
          name={name}
          className={`w-full p-2.5 ${icon ? "pl-10" : "pl-3"} border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 shadow-sm bg-white`}
          {...props}
        >
          {children}
        </Field>
      ) : (
        <Field
          type={type}
          id={name}
          name={name}
          className={`w-full p-2.5 ${icon ? "pl-10" : "pl-3"} border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 shadow-sm bg-white`}
          {...props}
        />
      )}
      {type === "date" && !icon && (
        <CalendarIcon className="absolute right-3 top-2.5 w-5 h-5 text-gray-400" />
      )}
      {as === "select" && (
        <ChevronDownIcon className="absolute right-3 top-2.5 w-5 h-5 text-gray-400 pointer-events-none" />
      )}
    </div>
    <ErrorMessage name={name} component="p" className="mt-1 text-sm text-red-600" />
  </div>
);

const DateField = ({ label, name, required = false, ...props }: any) => (
  <div className="mb-5">
    <label htmlFor={name} className="block text-sm font-medium text-gray-700 mb-2">
      {label}
      {required && <span className="text-blue-500 ml-1">*</span>}
    </label>
    <div className="relative">
      <div className="absolute left-3 top-2.5 text-gray-400">
        <CalendarIcon className="w-5 h-5" />
      </div>
      <Field
        type="date"
        id={name}
        name={name}
        className="w-full p-2.5 pl-10 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 shadow-sm bg-white [&::-webkit-calendar-picker-indicator]:opacity-0 [&::-webkit-calendar-picker-indicator]:absolute [&::-webkit-calendar-picker-indicator]:top-0 [&::-webkit-calendar-picker-indicator]:right-0 [&::-webkit-calendar-picker-indicator]:bottom-0 [&::-webkit-calendar-picker-indicator]:left-0 [&::-webkit-calendar-picker-indicator]:appearance-none"
        {...props}
      />
    </div>
    <ErrorMessage name={name} component="p" className="mt-1 text-sm text-red-600" />
  </div>
);

export default function Step1Content() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const wizardContext = useWizard();
  const [isLoading, setIsLoading] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [timeZones, setTimeZones] = useState<string[]>([]);
  const [currencies, setCurrencies] = useState<{ country: string; code: string }[]>(westernCurrencies);
  // Removed Phyllo influencer data states
  const [tooltip, setTooltip] = useState<string | null>(null);

  const campaignId = searchParams?.get("id");

  if (!wizardContext) throw new Error("Wizard context is required");
  const { formData, updateFormData, isEditing, campaignData } = wizardContext;

  // Fetch Time Zones
  useEffect(() => {
    const fetchTimeZones = async () => {
      try {
        const response = await fetch(
          `https://api.ipgeolocation.io/timezone?apiKey=${IPGEOLOCATION_API_KEY}`,
          { method: "GET", headers: { Accept: "application/json" } }
        );
        if (!response.ok) throw new Error(`Time zone fetch failed: ${response.status}`);
        const result = await response.json();
        setTimeZones(result.timezones || ["UTC", "GMT", "EST", "PST"]);
      } catch (err) {
        console.error("Failed to fetch time zones:", err);
        setTimeZones(["UTC", "GMT", "EST", "PST"]);
        toast.error("Unable to load time zones");
      }
    };
    if (IPGEOLOCATION_API_KEY) fetchTimeZones();
    else {
      console.warn("IPGEOLOCATION_API_KEY missing");
      setTimeZones(["UTC", "GMT", "EST", "PST"]);
    }
  }, []);

  // Removed Phyllo user creation useEffect

  // Load Campaign Data
  useEffect(() => {
    if (!campaignId) return;
    const loadCampaignData = async () => {
      setIsLoading(true);
      try {
        const response = await fetch(`/api/campaigns/${campaignId}`, { method: "GET" });
        if (!response.ok) throw new Error(`Campaign load failed: ${response.status}`);
        const result = await response.json();
        updateFormData?.(result.data || result.campaign);
        toast.success("Campaign data loaded");
      } catch (err) {
        console.error("Failed to load campaign:", err);
        setError(err instanceof Error ? err.message : "Failed to load campaign");
        toast.error("Failed to load campaign");
      } finally {
        setIsLoading(false);
      }
    };
    loadCampaignData();
  }, [campaignId, updateFormData]);

  const initialValues = useMemo(() => {
    if (isEditing && campaignData) {
      return {
        name: campaignData.name || "",
        businessGoal: campaignData.businessGoal || "",
        startDate: campaignData.startDate?.split("T")[0] || "",
        startTime: campaignData.startDate?.split("T")[1]?.slice(0, 5) || "00:00",
        endDate: campaignData.endDate?.split("T")[0] || "",
        endTime: campaignData.endDate?.split("T")[1]?.slice(0, 5) || "00:00",
        timeZone: campaignData.timeZone || "",
        contacts: campaignData.contacts?.length
          ? campaignData.contacts
          : [
              {
                firstName: campaignData.primaryContact?.firstName || "",
                surname: campaignData.primaryContact?.surname || "",
                email: campaignData.primaryContact?.email || "",
                position: campaignData.primaryContact?.position || "",
              },
            ],
        currency: campaignData.currency || "",
        totalBudget: campaignData.totalBudget || 0,
        socialMediaBudget: campaignData.socialMediaBudget || 0,
        platform: campaignData.platform || "",
        influencerHandle: campaignData.influencerHandle || "",
      };
    }
    return defaultFormValues;
  }, [isEditing, campaignData]);

  const handleSave = async (values: FormValues, isAutosave = false) => {
    setIsSubmitting(true);
    try {
      const method = campaignId ? "PATCH" : "POST";
      const url = campaignId ? `/api/campaigns/${campaignId}` : "/api/campaigns";
      const response = await fetch(url, {
        method,
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          ...values,
          startDate: `${values.startDate}T${values.startTime}:00Z`,
          endDate: `${values.endDate}T${values.endTime}:00Z`,
          step: 1,
          status: "draft",
        }),
      });
      if (!response.ok) throw new Error(`Save failed: ${response.status}`);
      const result = await response.json();
      const newCampaignId = result.id || campaignId;
      updateFormData?.({ ...formData, step1: values, campaignId: newCampaignId, currency: values.currency });
      if (!isAutosave) toast.success("Campaign saved successfully");
      if (!isAutosave && !campaignId)
        router.push(`/campaigns/wizard/step-2?id=${newCampaignId}`);
      return newCampaignId;
    } catch (err) {
      console.error("Save error:", err);
      setError(err instanceof Error ? err.message : "Failed to save campaign");
      if (!isAutosave) toast.error("Failed to save campaign");
    } finally {
      setIsSubmitting(false);
    }
  };

  const debouncedSave = useMemo(
    () => debounce((values: FormValues) => handleSave(values, true), 1000),
    [campaignId, formData, updateFormData]
  );

  // Removed influencer fetching code

  if (isLoading)
    return <LoadingSpinner />;
  if (error)
    return (
      <div className="p-6 bg-red-50 border border-red-200 rounded-md">
        <h3 className="text-red-800 font-semibold">Error</h3>
        <p className="text-red-600">{error}</p>
        <button onClick={() => router.push("/campaigns")} className="mt-4 btn btn-secondary">
          Return to Campaigns
        </button>
      </div>
    );

  return (
    <div className="w-full max-w-6xl mx-auto px-6 py-8 bg-white">
      <div className="mb-8">
        <h1 className="text-2xl font-semibold text-gray-900 mb-2">Campaign Creation</h1>
        <p className="text-gray-500">Complete all required fields to create your campaign</p>
      </div>

      <Formik
        initialValues={initialValues}
        validationSchema={OverviewSchema}
        onSubmit={(values) => handleSave(values)}
        enableReinitialize={true}
      >
        {({ values, isValid, dirty, setFieldValue }) => {
          useEffect(() => {
            if (dirty && isValid) debouncedSave(values);
          }, [values]);

          return (
            <>
              <Form className="space-y-8">
                <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-200">
                  <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <BriefcaseIcon className="w-5 h-5 mr-2 text-blue-500" />
                    Campaign Details
                  </h2>
                  <StyledField label="Campaign Name" name="name" required />
                  <StyledField
                    label="What business goals does this campaign support?"
                    name="businessGoal"
                    as="textarea"
                    rows={4}
                    required
                  />
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mt-6">
                    <DateField label="Start Date" name="startDate" required />
                    <StyledField label="Start Time" name="startTime" type="time" required />
                    <DateField label="End Date" name="endDate" required />
                    <StyledField label="End Time" name="endTime" type="time" required />
                  </div>
                  <StyledField label="Time Zone" name="timeZone" as="select" required icon={<ClockIcon className="w-5 h-5" />}>
                    <option value="">Select time zone</option>
                    {timeZones.map((tz) => (
                      <option key={tz} value={tz}>
                        {tz}
                      </option>
                    ))}
                  </StyledField>
                </div>

                <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-200">
                  <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <UserCircleIcon className="w-5 h-5 mr-2 text-blue-500" />
                    Contacts
                  </h2>
                  <FieldArray name="contacts">
                    {({ push, remove }) => (
                      <>
                        {values.contacts.map((_, index) => (
                          <div key={index} className="mb-4">
                            <h3 className="text-sm font-medium text-gray-700 mb-2">
                              {index === 0 ? "Primary Contact" : `Additional Contact ${index + 1}`}
                            </h3>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                              <StyledField
                                label="First Name"
                                name={`contacts.${index}.firstName`}
                                required
                                icon={<UserCircleIcon className="w-5 h-5" />}
                              />
                              <StyledField
                                label="Last Name"
                                name={`contacts.${index}.surname`}
                                required
                                icon={<UserCircleIcon className="w-5 h-5" />}
                              />
                            </div>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4">
                              <StyledField
                                label="Email"
                                name={`contacts.${index}.email`}
                                type="email"
                                required
                                icon={<EnvelopeIcon className="w-5 h-5" />}
                              />
                              <StyledField
                                label="Position"
                                name={`contacts.${index}.position`}
                                required
                                icon={<BuildingOfficeIcon className="w-5 h-5" />}
                              >
                                {["Manager", "Director", "VP", "Senior Manager", "C-Level", "Other"].map((pos) => (
                                  <option key={pos} value={pos}>
                                    {pos}
                                  </option>
                                ))}
                              </StyledField>
                            </div>
                            {index > 0 && (
                              <button
                                type="button"
                                onClick={() => remove(index)}
                                className="mt-2 text-red-600"
                              >
                                Remove Contact
                              </button>
                            )}
                          </div>
                        ))}
                        <button
                          type="button"
                          onClick={() => push({ firstName: "", surname: "", email: "", position: "" })}
                          className="mt-4 flex items-center text-blue-600"
                        >
                          <PlusCircleIcon className="w-5 h-5 mr-2" />
                          Add Additional Contact
                        </button>
                      </>
                    )}
                  </FieldArray>
                </div>

                <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-200">
                  <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <CurrencyDollarIcon className="w-5 h-5 mr-2 text-blue-500" />
                    Budget
                  </h2>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <StyledField label="Currency" name="currency" as="select" required icon={<CurrencyDollarIcon className="w-5 h-5" />}>
                      <option value="">Select currency</option>
                      {currencies.map(({ country, code }) => (
                        <option key={code} value={code}>{`${country} - ${code}`}</option>
                      ))}
                    </StyledField>
                    <div onMouseEnter={() => setTooltip("Total budget for the entire campaign")} onMouseLeave={() => setTooltip(null)}>
                      <StyledField label="Total Campaign Budget" name="totalBudget" type="number" required icon={<CurrencyDollarIcon className="w-5 h-5" />} />
                    </div>
                    <div onMouseEnter={() => setTooltip("Budget allocated for social media advertising")} onMouseLeave={() => setTooltip(null)}>
                      <StyledField label="Social Media Budget" name="socialMediaBudget" type="number" required icon={<CurrencyDollarIcon className="w-5 h-5" />} />
                    </div>
                  </div>
                </div>

                {/* Influencer Section (Phyllo code removed) */}
                <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-200">
                  <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <GlobeAltIcon className="w-5 h-5 mr-2 text-blue-500" />
                    Influencers
                  </h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <StyledField label="Platform" name="platform" as="select" required icon={<GlobeAltIcon className="w-5 h-5" />}>
                      <option value="">Select platform</option>
                      <option value="Instagram">Instagram</option>
                      <option value="YouTube">YouTube</option>
                      <option value="TikTok">TikTok</option>
                    </StyledField>
                    <StyledField
                      label="Influencer Handle"
                      name="influencerHandle"
                      required
                      icon={<UserCircleIcon className="w-5 h-5" />}
                      // Removed call to fetch influencer data
                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                        setFieldValue("influencerHandle", e.target.value)
                      }
                    />
                  </div>
                </div>
              </Form>

              <div className="pb-24"></div>
              <ProgressBar
                currentStep={1}
                onStepClick={(step) => router.push(`/campaigns/wizard/step-${step}`)}
                onBack={null}
                onNext={() => handleSave(values)}
                onSaveDraft={() => handleSave(values)}
                disableNext={isSubmitting || !isValid}
                isFormValid={isValid}
                isDirty={dirty}
                isSaving={isSubmitting}
              />
            </>
          );
        }}
      </Formik>
    </div>
  );
}
