"use client";

import React, {
  useState,
  useCallback,
  ChangeEvent,
  FormEvent,
  memo,
  useEffect,
} from 'react';
import { useRouter } from 'next/navigation';
import { useUser } from '@auth0/nextjs-auth0/client';
import { motion, AnimatePresence } from 'framer-motion';
import { Icon } from '@/components/ui/icon';
import { migrateHeroIcon } from '@/lib/icon-helpers';

/* --------------------------------------------------
   Type Definitions
----------------------------------------------------- */
interface PersonalInfo {
  firstName: string;
  surname: string;
  companyName: string;
  email: string; // Read-only
}

interface NotificationPreferences {
  campaignUpdates: boolean;
  brandHealthAlerts: boolean;
  aiInsightNotifications: boolean;
}

interface PasswordState {
  currentPassword: string;
  newPassword: string;
  confirmNewPassword: string;
}

interface TabConfig {
  id: string;
  label: string;
  href: string;
  icon?: React.ComponentType<{ className?: string }>;
  requiresAdmin?: boolean;
}

/* --------------------------------------------------
   Helper Functions
----------------------------------------------------- */
// A simple password validator that checks for at least 8 characters,
// 1 uppercase letter, 1 number and 1 special character.
const validatePassword = (password: string): boolean => {
  const minLength = 8;
  const uppercaseRegex = /[A-Z]/;
  const numberRegex = /[0-9]/;
  const specialCharRegex = /[@#$%^&*(),.?":{}|<>]/;
  return (
    password.length >= minLength &&
    uppercaseRegex.test(password) &&
    numberRegex.test(password) &&
    specialCharRegex.test(password)
  );
};

/* --------------------------------------------------
   Enhanced UI Components
----------------------------------------------------- */
const SectionHeader: React.FC<{
  icon: React.ComponentType<{ className?: string }>;
  title: string;
  description?: string;
}> = memo(({ icon: Icon, title, description }) => (
  <div className="flex items-center mb-6">
    <div className="bg-blue-50 p-3 rounded-lg">
      <Icon className="w-6 h-6 text-[var(--accent-color)]" />
    </div>
    <div className="ml-4">
      <h2 className="text-xl font-semibold text-[var(--primary-color)]">{title}</h2>
      {description && (
        <p className="mt-1 text-sm text-[var(--secondary-color)]">{description}</p>
      )}
    </div>
  </div>
));

const Card = memo(({ children }: { children: React.ReactNode }) => (
  <motion.div
    initial={{ opacity: 0, y: 20 }}
    animate={{ opacity: 1, y: 0 }}
    transition={{ duration: 0.3 }}
    className="bg-white rounded-xl shadow-sm hover:shadow-md transition-all duration-300 p-6"
  >
    {children}
  </motion.div>
));

/* --------------------------------------------------
   Action Buttons Component
----------------------------------------------------- */
const ActionButtons: React.FC<{
  hasChanges: boolean;
  isSaving: boolean;
  onSave: () => void;
  onCancel: () => void;
  onSignOut: () => void;
}> = memo(({ hasChanges, isSaving, onSave, onCancel, onSignOut }) => (
  <div className="flex items-center space-x-3">
    <motion.button
      whileHover={{ scale: 1.02 }}
      whileTap={{ scale: 0.98 }}
      onClick={onCancel}
      disabled={isSaving}
      className="px-4 py-2 text-[var(--primary-color)] bg-[var(--background-color)] rounded-lg hover:bg-gray-200 
        transition-colors duration-200 font-medium flex items-center"
    >
      <Icon name="xCircle" className="w-5 h-5 mr-2" />
      Cancel
    </motion.button>
    <motion.button
      whileHover={{ scale: 1.02 }}
      whileTap={{ scale: 0.98 }}
      onClick={onSave}
      disabled={!hasChanges || isSaving}
      className={`px-4 py-2 rounded-lg transition-colors duration-200 font-medium 
        flex items-center ${
          !hasChanges || isSaving
            ? 'bg-blue-300 cursor-not-allowed text-white'
            : 'bg-[var(--accent-color)] hover:bg-opacity-90 text-white'
        }`}
    >
      {isSaving ? (
        <>
          <Icon name="arrowPath" className="w-5 h-5 mr-2 animate-spin" />
          Saving...
        </>
      ) : (
        <>
          <Icon name="checkCircle" className="w-5 h-5 mr-2" />
          Save
        </>
      )}
    </motion.button>
    <motion.button
      whileHover={{ scale: 1.02 }}
      whileTap={{ scale: 0.98 }}
      onClick={onSignOut}
      className="px-4 py-2 text-white bg-red-500 rounded-lg hover:bg-red-600 
        transition-colors duration-200 font-medium flex items-center"
    >
      <svg
        className="w-5 h-5 mr-2"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth={2}
          d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"
        />
      </svg>
      Logout
    </motion.button>
  </div>
)); 