'use client';

import React from 'react';
import { cn } from '@/lib/utils';

// This will be populated by the icon-registry.json file generated by the download-icons.js script
type IconName = string;

// Size variants for the icon
type IconSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl';

// Platform names for social icons
type PlatformName = 'facebook' | 'instagram' | 'linkedin' | 'tiktok' | 'youtube' | 'x';

// Map of icon prefixes to style folders
const ICON_STYLE_FOLDERS = {
  'fas': 'solid',
  'fal': 'light',
  'fab': 'brands',
  'far': 'regular'
};
export interface LocalIconProps {
  solid?: any;
  /**
   * Name of the icon to display
   */
  name: IconName;

  /**
   * CSS class names to apply to the icon
   */
  className?: string;

  /**
   * Size variant of the icon
   */
  size?: IconSize;

  /**
   * Optional title for accessibility
   */
  title?: string;

  /**
   * Click handler for the icon
   */
  onClick?: (e: React.MouseEvent<SVGElement>) => void;

  /**
   * Whether to apply a spin animation to the icon
   */
  spin?: boolean;

  /**
   * Whether to apply a pulse animation to the icon
   */
  pulse?: boolean;

  /**
   * Whether the icon should be flipped horizontally
   */
  flipHorizontal?: boolean;

  /**
   * Whether the icon should be flipped vertically
   */
  flipVertical?: boolean;

  /**
   * Degree rotation for the icon (0-360)
   */
  rotation?: 0 | 90 | 180 | 270;

  /**
   * Icon style (solid, light, etc) - by default uses the style from the icon prefix
   */
  style?: 'solid' | 'light' | 'brands' | 'regular';
}
export interface PlatformIconProps {
  /**
   * Name of the platform
   */
  platformName: PlatformName;

  /**
   * CSS class names to apply to the icon
   */
  className?: string;

  /**
   * Size variant of the icon
   */
  size?: IconSize;

  /**
   * Click handler for the icon
   */
  onClick?: (e: React.MouseEvent<SVGElement>) => void;
}

/**
 * Map of icon sizes to Tailwind CSS classes
 */
const SIZE_CLASSES: Record<IconSize, string> = {
  'xs': 'w-3 h-3',
  'sm': 'w-4 h-4',
  'md': 'w-5 h-5',
  'lg': 'w-6 h-6',
  'xl': 'w-8 h-8',
  '2xl': 'w-10 h-10',
  '3xl': 'w-12 h-12',
  '4xl': 'w-16 h-16'
};

/**
 * Map of platform names to their corresponding icon names
 */
const PLATFORM_ICON_MAP: Record<PlatformName, IconName> = {
  'facebook': 'faFacebook',
  'instagram': 'faInstagram',
  'linkedin': 'faLinkedin',
  'tiktok': 'faTiktok',
  'youtube': 'faYoutube',
  'x': 'faXTwitter'
};

/**
 * Extracts the base name of an icon without the fa prefix
 */
function getIconBaseName(fullName: string): string {
  // Handle special Light icon case - remove Light suffix
  const nameWithoutLightSuffix = fullName.replace(/Light$/, '');

  // Convert e.g. faUserCircle to user-circle
  const baseName = nameWithoutLightSuffix.replace(/^fa/, '').replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
  return baseName;
}

/**
 * Detects if an icon should use light style
 */
function isLightIcon(iconName: string): boolean {
  return iconName.endsWith('Light');
}

/**
 * Detects if an icon is a social/brand icon
 */
function isBrandIcon(iconName: string): boolean {
  const socialIcons = ['faFacebook', 'faInstagram', 'faLinkedin', 'faTiktok', 'faYoutube', 'faXTwitter', 'faTwitter', 'faGithub', 'faReddit', 'faPinterest'];
  return socialIcons.includes(iconName);
}

/**
 * LocalIcon Component
 * 
 * Renders an SVG icon from local files, with various customization options
 */
export function LocalIcon({
  name,
  className,
  size = 'md',
  title,
  onClick,
  spin = false,
  pulse = false,
  flipHorizontal = false,
  flipVertical = false,
  rotation = 0,
  style,
  // This is optional - we'll detect automatically if not provided
  ...props
}: LocalIconProps) {
  // Build transformation CSS classes
  const transformClasses = [spin && 'animate-spin', pulse && 'animate-pulse', flipHorizontal && 'scale-x-[-1]', flipVertical && 'scale-y-[-1]', rotation && `rotate-${rotation}`].filter(Boolean).join(' ');

  // Get the base name of the icon
  const iconBaseName = getIconBaseName(name);

  // Determine icon style if not explicitly provided
  const detectedStyle = style ? style : isLightIcon(name) ? 'light' : isBrandIcon(name) ? 'brands' : 'solid';

  // Instead of loading SVG file directly, use embedded SVG with paths from iconData
  // First, find the icon data by name in our iconData registry
  const normalizedName = name.replace(/Light$/, '');
  const iconKey = isLightIcon(name) ? `${normalizedName}Light` : normalizedName;
  
  // Try to find icon data, fallback to a placeholder if not found
  const iconInfo = iconData[iconKey as IconName] || {
    width: 512,
    height: 512,
    path: 'M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z', // Circle placeholder
    url: '' // No longer needed
  };

  return (
    <span className={cn('inline-flex shrink-0', SIZE_CLASSES[size], className)} aria-hidden={!title} {...props}>
      <svg 
        xmlns="http://www.w3.org/2000/svg"
        viewBox={`0 0 ${iconInfo.width} ${iconInfo.height}`}
        className={cn('w-full h-full', transformClasses)}
        fill="currentColor"
        aria-hidden={!title}
        role={title ? 'img' : 'presentation'}
        onClick={onClick as any}
      >
        {title && <title>{title}</title>}
        <path d={iconInfo.path} />
      </svg>
    </span>
  );
}

/**
 * Platform Icon component - convenience wrapper for social media icons
 */
export function PlatformIcon({
  platformName,
  className,
  size = 'md',
  onClick
}: PlatformIconProps) {
  // Convert platform name to corresponding icon name
  const iconName = PLATFORM_ICON_MAP[platformName];
  if (!iconName) {
    console.warn(`Unknown platform name: ${platformName}`);
    return null;
  }

  // No need to set style='brands' - it will be detected automatically
  return <LocalIcon name={iconName} className={className} size={size} onClick={onClick} solid={false} />;
}

/**
 * This is a drop-in replacement for the FontAwesome-based Icon component.
 * You can switch to using this component once you've run the download-icons.js script
 * to extract all the SVG icons used in your project.
 */
export const Icon = LocalIcon;