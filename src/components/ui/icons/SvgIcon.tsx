'use client';

import React, { useMemo } from 'react';
import { cn } from '@/lib/utils';
import Image from 'next/image';

// This type will be created when icon-data.ts is generated
// For now we're using a placeholder until the scripts are run
type IconName = string;

// Size variants for the icon
type IconSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl';

// Platform names for social icons
type PlatformName = 'facebook' | 'instagram' | 'linkedin' | 'tiktok' | 'youtube' | 'x';

// Map of icon prefixes to style folders
const ICON_STYLE_FOLDERS = {
  'fas': 'solid',
  'fal': 'light',
  'fab': 'brands',
  'far': 'regular'
};

export interface SvgIconProps {
  /**
   * Name of the icon to display
   */
  name: IconName;
  
  /**
   * CSS class names to apply to the icon
   */
  className?: string;
  
  /**
   * Size variant of the icon
   */
  size?: IconSize;
  
  /**
   * Optional title for accessibility
   */
  title?: string;

  /**
   * Click handler for the icon
   */
  onClick?: (e: React.MouseEvent<SVGElement>) => void;
  
  /**
   * Whether to apply a spin animation to the icon
   */
  spin?: boolean;
  
  /**
   * Whether to apply a pulse animation to the icon
   */
  pulse?: boolean;
  
  /**
   * Whether the icon should be flipped horizontally
   */
  flipHorizontal?: boolean;
  
  /**
   * Whether the icon should be flipped vertically
   */
  flipVertical?: boolean;
  
  /**
   * Degree rotation for the icon (0-360)
   */
  rotation?: 0 | 90 | 180 | 270;

  /**
   * Icon style (solid, light, etc) - by default uses the style from the icon prefix
   */
  style?: 'solid' | 'light' | 'brands' | 'regular';
}

export interface PlatformIconProps {
  /**
   * Name of the platform
   */
  platformName: PlatformName;
  
  /**
   * CSS class names to apply to the icon
   */
  className?: string;
  
  /**
   * Size variant of the icon
   */
  size?: IconSize;
  
  /**
   * Click handler for the icon
   */
  onClick?: (e: React.MouseEvent<SVGElement>) => void;
}

/**
 * Map of icon sizes to Tailwind CSS classes
 */
const SIZE_CLASSES: Record<IconSize, string> = {
  'xs': 'w-3 h-3',
  'sm': 'w-4 h-4',
  'md': 'w-5 h-5',
  'lg': 'w-6 h-6',
  'xl': 'w-8 h-8',
  '2xl': 'w-10 h-10',
  '3xl': 'w-12 h-12',
  '4xl': 'w-16 h-16',
};

/**
 * Map of platform names to their corresponding icon names
 */
const PLATFORM_ICON_MAP: Record<PlatformName, IconName> = {
  'facebook': 'faFacebook',
  'instagram': 'faInstagram',
  'linkedin': 'faLinkedin',
  'tiktok': 'faTiktok',
  'youtube': 'faYoutube',
  'x': 'faXTwitter',
} as const;

// We'll try to dynamically import the icon data when the script generates it
let iconData: Record<string, { 
  width: number; 
  height: number; 
  path: string; 
  url: string;
  prefix?: string; // Add prefix as it might come from the registry
  name?: string;
}> = {};

// This will be filled after running the icon scripts
try {
  // When icon-data.ts exists, this will work
  // @ts-ignore - This file will be generated by the scripts
  const importedData = require('./icon-data');
  iconData = importedData.iconData || {};
} catch (e) {
  // If the import fails, we'll use direct file access instead
  console.warn('Icon data not found. Run the icon generation scripts or icons will be loaded from files.');
}

/**
 * Extracts the base name of an icon without the fa prefix
 */
function getIconBaseName(fullName: string): string {
  // Handle special Light icon case - remove Light suffix
  const nameWithoutLightSuffix = fullName.replace(/Light$/, '');
  
  // Convert e.g. faUserCircle to user-circle
  const baseName = nameWithoutLightSuffix.replace(/^fa/, '').replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
  return baseName;
}

/**
 * Extracts the prefix/style of an icon
 */
function getIconPrefix(fullName: string): string {
  // Special case for Light icons
  if (fullName.endsWith('Light')) {
    return 'fal'; // Light icons
  }
  
  // Check if it's a social media icon
  const socialIcons = ['faFacebook', 'faInstagram', 'faLinkedin', 'faTiktok', 'faYoutube', 'faXTwitter', 'faTwitter', 'faGithub', 'faReddit', 'faPinterest'];
  if (socialIcons.includes(fullName)) {
    return 'fab'; // Brand icons
  }
  
  // For imported icons like faUser, we get the prefix from icon data or default to 'fas' (solid)
  return (iconData[fullName]?.prefix || 'fas');
}

/**
 * SvgIcon Component
 * 
 * Renders an SVG icon either from embedded data or falls back to file loading
 */
export function SvgIcon({
  name,
  className,
  size = 'md',
  title,
  onClick,
  spin = false,
  pulse = false,
  flipHorizontal = false,
  flipVertical = false,
  rotation = 0,
  style: explicitStyle,
  ...props
}: SvgIconProps) {
  // Build transformation CSS classes
  const transformClasses = useMemo(() => {
    return [
      spin && 'animate-spin',
      pulse && 'animate-pulse',
      flipHorizontal && 'scale-x-[-1]',
      flipVertical && 'scale-y-[-1]',
      rotation && `rotate-${rotation}`,
    ].filter(Boolean).join(' ');
  }, [spin, pulse, flipHorizontal, flipVertical, rotation]);

  // Get the icon style folder (solid, light, etc)
  const prefix = getIconPrefix(name);
  const styleName = explicitStyle || (ICON_STYLE_FOLDERS[prefix as keyof typeof ICON_STYLE_FOLDERS] || 'solid');
  const iconBaseName = getIconBaseName(name);
  
  // Create the URL for the icon SVG
  const iconUrl = `/ui-icons/${styleName}/${iconBaseName}.svg`;

  // If we have embedded data, use it
  if (iconData[name]) {
    const { width, height, path, url } = iconData[name];

    return (
      <span 
        className={cn(
          'inline-flex shrink-0',
          SIZE_CLASSES[size],
          className
        )} 
        aria-hidden={!title}
        {...props}
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox={`0 0 ${width} ${height}`}
          fill="currentColor"
          className={cn('w-full h-full', transformClasses)}
          onClick={onClick}
        >
          {title && <title>{title}</title>}
          <path d={path} />
        </svg>
      </span>
    );
  }

  // Fallback to loading the SVG file directly
  return (
    <span 
      className={cn(
        'inline-flex shrink-0',
        SIZE_CLASSES[size],
        className
      )} 
      aria-hidden={!title}
      {...props}
    >
      <img 
        src={iconUrl}
        alt={title || name}
        className={cn('w-full h-full text-current', transformClasses)}
        onClick={onClick as any}
        style={{ color: 'inherit' }}
      />
    </span>
  );
}

/**
 * Platform Icon component - convenience wrapper for social media icons
 */
export function PlatformIcon({
  platformName,
  className,
  size = 'md',
  onClick,
}: PlatformIconProps) {
  // Convert platform name to corresponding icon name
  const iconName = PLATFORM_ICON_MAP[platformName];
  
  if (!iconName) {
    console.warn(`Unknown platform name: ${platformName}`);
    return null;
  }
  
  return (
    <SvgIcon
      name={iconName}
      className={className}
      size={size}
      onClick={onClick}
    />
  );
}

/**
 * This is a drop-in replacement for the FontAwesome-based Icon component.
 * Uses local SVG files for maximum reliability.
 */
export const Icon = SvgIcon; 