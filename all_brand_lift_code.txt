"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";

// MOCK API CALL: Replace this with your real API call.
const fetchCampaignData = async (): Promise<any[]> => {
  try {
    const response = await fetch("/api/campaigns");
    if (!response.ok) throw new Error("Failed to fetch campaigns");
    return await response.json();
  } catch (error) {
    console.error("Error fetching campaigns:", error);
    return []; // Return an empty array on error.
  }
};

export default function BrandLiftPage() {
  const [selectedCampaign, setSelectedCampaign] = useState<any | null>(null);
  const [campaigns, setCampaigns] = useState<any[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();

  useEffect(() => {
    const loadCampaigns = async () => {
      setLoading(true);
      const campaignsData = await fetchCampaignData();
      if (campaignsData.length === 0) {
        setError("No campaigns available.");
      }
      setCampaigns(campaignsData);
      setLoading(false);
    };
    loadCampaigns();
  }, []);

  // When a campaign is chosen, update state (but DO NOT immediately push navigation)
  const handleCampaignSelection = (campaignId: number) => {
    const selected = campaigns.find((campaign) => campaign.id === campaignId);
    setSelectedCampaign(selected);
  };

  // Only navigate if a valid campaign is selected.
  const handleStartTest = () => {
    if (!selectedCampaign) {
      alert("Please select a campaign first!");
      return;
    }
    router.push(`/brand-lift/selected-campaign?campaignId=${selectedCampaign.id}`);
  };

  if (loading) return <div>Loading campaigns...</div>;

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-8">
      {/* Header Section */}
      <h1 className="text-3xl font-semibold text-[#333]">Brand Lift</h1>
      <p className="text-lg text-gray-600">
        Discover how your campaign impacts brand lift and audience perception.
      </p>

      {error && <div className="text-red-500">{error}</div>}

      {/* Campaign Selection Section */}
      <div className="border p-4 rounded-lg bg-white shadow-sm">
        <h2 className="text-xl font-semibold">Select a Campaign</h2>
        <select
          className="mt-2 p-2 border rounded-md w-full"
          value={selectedCampaign ? selectedCampaign.id : ""}
          onChange={(e) => handleCampaignSelection(Number(e.target.value))}
        >
          <option value="" disabled>
            Select a campaign
          </option>
          {campaigns.map((campaign) => (
            <option key={campaign.id} value={campaign.id}>
              {campaign.name}
            </option>
          ))}
        </select>

        {selectedCampaign && (
          <div className="mt-4">
            <h3 className="text-lg font-semibold">Campaign Overview</h3>
            <div>
              <strong>Campaign Name:</strong> {selectedCampaign.name}
            </div>
            <button
              className="mt-2 px-4 py-2 bg-blue-600 text-white rounded-md"
              onClick={handleStartTest}
            >
              Launch {selectedCampaign.name}
            </button>
          </div>
        )}
      </div>

      {/* Recent Brand Lift Results Section */}
      <div className="border p-4 rounded-lg bg-white shadow-sm mt-4">
        <h2 className="text-xl font-semibold">Recent Brand Lift Results</h2>
        <table className="min-w-full mt-4 border-collapse">
          <thead>
            <tr className="border-b">
              <th className="text-left p-2">Test Name</th>
              <th className="text-left p-2">Status</th>
              <th className="text-left p-2">Date</th>
              <th className="text-left p-2">KPI</th>
              <th className="text-left p-2">Survey Completions</th>
              <th className="text-left p-2">Actions</th>
            </tr>
          </thead>
          <tbody>
            {/* These rows are mocked. In production, replace with dynamic data. */}
            <tr className="border-t">
              <td className="p-2">Test A</td>
              <td className="p-2">Paused</td>
              <td className="p-2">01/05/24</td>
              <td className="p-2">N/A</td>
              <td className="p-2">150</td>
              <td className="p-2">
                <button className="text-blue-600 hover:text-blue-800">See Report</button>
              </td>
            </tr>
            <tr className="border-t">
              <td className="p-2">Test B</td>
              <td className="p-2">Completed</td>
              <td className="p-2">15/04/24</td>
              <td className="p-2">60% Awareness</td>
              <td className="p-2">300</td>
              <td className="p-2">
                <button className="text-blue-600 hover:text-blue-800">See Report</button>
              </td>
            </tr>
            <tr className="border-t">
              <td className="p-2">Test C</td>
              <td className="p-2">Completed</td>
              <td className="p-2">20/03/24</td>
              <td className="p-2">80% Consideration</td>
              <td className="p-2">300</td>
              <td className="p-2">
                <button className="text-blue-600 hover:text-blue-800">See Report</button>
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      {/* Bottom Navigation with Progress Bar Placeholder */}
      <div className="flex justify-between items-center mt-6">
        <div className="text-sm text-gray-600">Progress Bar goes here</div>
        <div className="space-x-4">
          <button
            onClick={() => router.push("/campaigns")}
            className="px-4 py-2 bg-gray-500 text-white rounded-md"
          >
            Back
          </button>
          <button
            onClick={handleStartTest}
            className="px-4 py-2 bg-blue-600 text-white rounded-md"
          >
            Start Test
          </button>
        </div>
      </div>
    </div>
  );
}
// src/app/brand-lift/progress/page.tsx
"use client";
import React, { useEffect, useState } from "react";
import { useSearchParams } from "next/navigation";

export default function BrandLiftProgressPage() {
  const searchParams = useSearchParams();
  const campaignId = searchParams.get("campaignId");
  const [progress, setProgress] = useState(0);

  useEffect(() => {
    // For MVP, simulate progress increment.
    const interval = setInterval(() => {
      setProgress((prev) => (prev < 100 ? prev + 10 : 100));
    }, 1000);
    return () => clearInterval(interval);
  }, []);

  return (
    <div style={{ padding: "1rem" }}>
      <h1>Brand Lift Progress</h1>
      <p>Campaign ID: {campaignId}</p>
      <div style={{ background: "#ccc", width: "100%", height: "20px", marginBottom: "1rem" }}>
        <div style={{ background: "#4caf50", width: `${progress}%`, height: "20px" }} />
      </div>
      <p>{progress}% completed</p>
      <button onClick={() => window.location.href = `/brand-lift/report?campaignId=${campaignId}`}>
        View Report
      </button>
    </div>
  );
}
// src/app/brand-lift/report/page.tsx
"use client";
import React from "react";
import { useSearchParams } from "next/navigation";

export default function BrandLiftReportPage() {
  const searchParams = useSearchParams();
  const campaignId = searchParams.get("campaignId");

  return (
    <div style={{ padding: "1rem" }}>
      <h1>Brand Lift Report</h1>
      <p>Campaign ID: {campaignId}</p>
      <div>
        <p>[Detailed report with charts, metrics, and AI insights]</p>
      </div>
      <button onClick={() => window.location.href = "/dashboard"}>
        Return to Dashboard
      </button>
    </div>
  );
}
"use client";

import React, { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";

// Define interfaces for better type safety
interface Contact {
  firstName: string;
  surname: string;
  email: string;
  position: string;
}

interface Overview {
  businessGoal: string;
  startDate: string;
  endDate: string;
  timeZone: string;
  primaryContact: Contact;
}

interface Objectives {
  mainMessage: string;
  hashtags?: string;
  memorability: string;
  keyBenefits: string;
}

interface TestResult {
  testName: string;
  status: string;
  date: string;
  kpi?: string;
  surveyCompletions: number;
}

interface CampaignDetails {
  id: number;
  name: string;
  status: string;
  kpi: string;
  platforms?: string[];
  overview?: Overview;
  objectives?: Objectives;
  recentTests?: TestResult[];
}

// Function to fetch campaign details using the provided campaignId.
const fetchCampaignDetails = async (campaignId: string): Promise<CampaignDetails | null> => {
  try {
    const response = await fetch(`/api/campaigns/${campaignId}`);
    if (!response.ok) throw new Error("Failed to fetch campaign details");
    return await response.json();
  } catch (error) {
    console.error("Error fetching campaign details:", error);
    return null;
  }
};

export default function SelectedCampaignPage() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const campaignId = searchParams.get("campaignId");

  const [campaignDetails, setCampaignDetails] = useState<CampaignDetails | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!campaignId) {
      setError("Campaign ID is missing");
      setLoading(false);
      return;
    }

    const loadDetails = async () => {
      setLoading(true);
      const details = await fetchCampaignDetails(campaignId);
      if (!details) {
        setError("Failed to fetch campaign details");
      } else {
        setCampaignDetails(details);
      }
      setLoading(false);
    };

    loadDetails();
  }, [campaignId]);

  if (loading) return <div>Loading campaign details...</div>;
  if (error) return <div className="text-red-500">Error: {error}</div>;
  if (!campaignDetails) return <div>No campaign details available.</div>;

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-8">
      {/* Header Section */}
      <h1 className="text-3xl font-semibold text-[#333]">
        Brand Lift - {campaignDetails.name}
      </h1>
      <p className="text-lg text-gray-600">
        Below is a summary of your campaign as configured in the wizard.
      </p>

      {/* Campaign Overview */}
      <div className="border p-4 rounded-lg bg-white shadow-sm">
        <h2 className="text-xl font-semibold mb-4">Campaign Overview</h2>
        <div className="mb-2">
          <strong>Campaign Name:</strong> {campaignDetails.name}
        </div>
        <div className="mb-2">
          <strong>Status:</strong> {campaignDetails.status}
        </div>
        <div className="mb-2">
          <strong>Primary KPI:</strong> {campaignDetails.kpi}
        </div>
        <div className="mb-2">
          <strong>Platforms:</strong>{" "}
          {campaignDetails.platforms && campaignDetails.platforms.length > 0
            ? campaignDetails.platforms.join(", ")
            : "No platforms available"}
        </div>
        {campaignDetails.overview && (
          <div className="mt-4">
            <h3 className="text-lg font-semibold">Overview</h3>
            <div>
              <strong>Business Goal:</strong> {campaignDetails.overview.businessGoal}
            </div>
            <div>
              <strong>Start Date:</strong> {campaignDetails.overview.startDate}
            </div>
            <div>
              <strong>End Date:</strong> {campaignDetails.overview.endDate}
            </div>
            <div>
              <strong>Time Zone:</strong> {campaignDetails.overview.timeZone}
            </div>
            <div>
              <strong>Primary Contact:</strong>{" "}
              {campaignDetails.overview.primaryContact.firstName}{" "}
              {campaignDetails.overview.primaryContact.surname} (
              {campaignDetails.overview.primaryContact.email})
            </div>
          </div>
        )}
        {campaignDetails.objectives && (
          <div className="mt-4">
            <h3 className="text-lg font-semibold">Objectives & Messaging</h3>
            <div>
              <strong>Main Message:</strong> {campaignDetails.objectives.mainMessage}
            </div>
            <div>
              <strong>Hashtags:</strong> {campaignDetails.objectives.hashtags || "N/A"}
            </div>
            <div>
              <strong>Memorability:</strong> {campaignDetails.objectives.memorability}
            </div>
            <div>
              <strong>Key Benefits:</strong> {campaignDetails.objectives.keyBenefits}
            </div>
          </div>
        )}
      </div>

      {/* Recent Brand Lift Results */}
      <div className="border p-4 rounded-lg bg-white shadow-sm">
        <h2 className="text-xl font-semibold">Recent Brand Lift Results</h2>
        {campaignDetails.recentTests && campaignDetails.recentTests.length > 0 ? (
          <table className="min-w-full mt-4 border-collapse">
            <thead>
              <tr className="border-b">
                <th className="text-left p-2">Test Name</th>
                <th className="text-left p-2">Status</th>
                <th className="text-left p-2">Date</th>
                <th className="text-left p-2">KPI</th>
                <th className="text-left p-2">Survey Completions</th>
                <th className="text-left p-2">Actions</th>
              </tr>
            </thead>
            <tbody>
              {campaignDetails.recentTests.map((test) => (
                <tr key={test.testName} className="border-t">
                  <td className="p-2">{test.testName}</td>
                  <td className="p-2">{test.status}</td>
                  <td className="p-2">{test.date}</td>
                  <td className="p-2">{test.kpi || "N/A"}</td>
                  <td className="p-2">{test.surveyCompletions}</td>
                  <td className="p-2">
                    <button className="text-blue-600 hover:text-blue-800">See Report</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        ) : (
          <div className="text-gray-600 mt-4">No recent results available.</div>
        )}
      </div>

      {/* Navigation Buttons */}
      <div className="mt-6 space-x-4">
        {/* "Edit Campaign" now takes the user back to the campaign wizard */}
        <button
          onClick={() =>
            router.push(`/campaigns/wizard/step-1?campaignId=${campaignDetails.id}`)
          }
          className="px-4 py-2 bg-blue-600 text-white rounded-md"
        >
          Edit Campaign
        </button>
        <button
          onClick={() =>
            router.push(`/brand-lift/survey-design?campaignId=${campaignDetails.id}`)
          }
          className="px-4 py-2 bg-green-600 text-white rounded-md"
        >
          Launch Campaign
        </button>
      </div>
    </div>
  );
}
"use client";

import React, {
  useState,
  useReducer,
  useEffect,
  useCallback,
  ChangeEvent,
  FC
} from "react";
import { useRouter, useSearchParams } from "next/navigation";

/* ============================================================================
   TYPE DEFINITIONS
   ============================================================================ */

/**
 * Represents a reviewer comment.
 */
interface ReviewerComment {
  id: number;
  name: string;
  comment: string;
  suggestion: "Implement Suggestions" | "No Changes Needed";
}

/**
 * Represents an answer choice for radio questions.
 */
interface SurveyAnswer {
  id: string;
  label: string;
  imageUrl?: string;
}

/**
 * Represents a single survey question.
 */
interface SurveyQuestion {
  id: string;
  prompt: string;
  type: "radio" | "text";
  answers?: SurveyAnswer[]; // Only for radio questions.
  placeholder?: string;     // Only for text questions.
  selectedAnswer?: string;  // The chosen radio answer ID.
  typedResponse?: string;   // The user's text response.
}

/**
 * Represents the complete survey.
 */
interface SurveyData {
  id: number;
  title: string;
  subTitle: string;
  questions: SurveyQuestion[];
}

/* ============================================================================
   MOCK DATA
   ============================================================================ */

// Example images for the first question.
const catImages = [
  "https://placekitten.com/100/100",
  "https://placekitten.com/101/100",
  "https://placekitten.com/102/100",
  "https://placekitten.com/103/100",
];

/**
 * A sample survey matching the Figma design.
 * Now includes 10 questions.
 */
const initialSurvey: SurveyData = {
  id: 1,
  title: "Collaborative Approval & Sign-Off",
  subTitle: "A process to ensure team consensus and final sign-off before completion",
  questions: [
    {
      id: "q1",
      prompt: "How familiar are you with the brand shown in the clip?",
      type: "radio",
      answers: [
        { id: "a1", label: "very familiar", imageUrl: catImages[0] },
        { id: "a2", label: "somewhat familiar", imageUrl: catImages[1] },
        { id: "a3", label: "not familiar at all", imageUrl: catImages[2] },
        { id: "a4", label: "no/other", imageUrl: catImages[3] },
      ],
    },
    {
      id: "q2",
      prompt: "What do you remember most from the ad?",
      type: "text",
      placeholder: "Type your response here...",
    },
    {
      id: "q3",
      prompt: "How likely are you to talk about the brand?",
      type: "radio",
      answers: [
        { id: "a1", label: "Very likely" },
        { id: "a2", label: "Somewhat likely" },
        { id: "a3", label: "Not likely" },
      ],
    },
    {
      id: "q4",
      prompt: "Which emotive best matches how you feel about the brand?",
      type: "radio",
      answers: [
        { id: "a1", label: "Excited" },
        { id: "a2", label: "Neutral" },
        { id: "a3", label: "Sceptical" },
        { id: "a4", label: "Unimpressed" },
      ],
    },
    {
      id: "q5",
      prompt: "What improvements would you suggest?",
      type: "text",
      placeholder: "Enter your suggestions here...",
    },
    {
      id: "q6",
      prompt: "Rate the overall design quality:",
      type: "radio",
      answers: [
        { id: "a1", label: "Excellent" },
        { id: "a2", label: "Good" },
        { id: "a3", label: "Fair" },
        { id: "a4", label: "Poor" },
      ],
    },
    {
      id: "q7",
      prompt: "How likely are you to recommend this campaign?",
      type: "radio",
      answers: [
        { id: "a1", label: "Very likely" },
        { id: "a2", label: "Likely" },
        { id: "a3", label: "Unlikely" },
        { id: "a4", label: "Very unlikely" },
      ],
    },
    {
      id: "q8",
      prompt: "Do you have any additional feedback?",
      type: "text",
      placeholder: "Type your additional feedback here...",
    },
    {
      id: "q9",
      prompt: "Which part of the survey did you like the most?",
      type: "radio",
      answers: [
        { id: "a1", label: "Design" },
        { id: "a2", label: "Content" },
        { id: "a3", label: "Flow" },
        { id: "a4", label: "Clarity" },
      ],
    },
    {
      id: "q10",
      prompt: "Any final thoughts?",
      type: "text",
      placeholder: "Enter any final comments...",
    },
  ],
};

/**
 * Sample reviewer comments as per the Figma design.
 */
const initialComments: ReviewerComment[] = [
  {
    id: 1,
    name: "Lucas Atkins",
    comment: "Could we add a short intro or a note at the beginning for clarity?",
    suggestion: "Implement Suggestions",
  },
  {
    id: 2,
    name: "Ethan Clay",
    comment: "Maybe we shorten the question about brand talk? It's a bit long.",
    suggestion: "Implement Suggestions",
  },
  {
    id: 3,
    name: "Marta Escobar",
    comment: "I think the images are fun! No real changes needed.",
    suggestion: "No Changes Needed",
  },
  {
    id: 4,
    name: "Asra Patel",
    comment: "All good from my side!",
    suggestion: "No Changes Needed",
  },
];

/* ============================================================================
   STATE MANAGEMENT WITH useReducer
   ============================================================================ */

type SurveyAction =
  | { type: "SELECT_ANSWER"; questionId: string; answerId: string }
  | { type: "TYPE_RESPONSE"; questionId: string; response: string };

/**
 * Reducer to update the survey state.
 */
function surveyReducer(state: SurveyData, action: SurveyAction): SurveyData {
  switch (action.type) {
    case "SELECT_ANSWER":
      return {
        ...state,
        questions: state.questions.map(q =>
          q.id === action.questionId && q.answers
            ? { ...q, selectedAnswer: action.answerId }
            : q
        ),
      };
    case "TYPE_RESPONSE":
      return {
        ...state,
        questions: state.questions.map(q =>
          q.id === action.questionId && q.type === "text"
            ? { ...q, typedResponse: action.response }
            : q
        ),
      };
    default:
      return state;
  }
}

/* ============================================================================
   COMPONENTS
   ============================================================================ */

/**
 * SurveyHeader: Renders the top section with title, subtitle, and a request button.
 * The "Senior Finalities" text has been removed.
 */
const SurveyHeader: FC<{
  campaignId: string;
  survey: SurveyData;
  onRequestSignOff: () => void;
}> = ({ campaignId, survey, onRequestSignOff }) => (
  <header className="flex flex-col md:flex-row md:items-center md:justify-between border-b border-divider-color pb-4 mb-6">
    <div className="space-y-1">
      <h1 className="text-3xl font-bold text-primary-color">Survey Approval</h1>
      {/* Removed the "Senior Finalities" text */}
      <p className="text-sm text-secondary-color">
        {survey.title} &mdash; {survey.subTitle}
      </p>
    </div>
    <div className="mt-4 md:mt-0">
      <button
        onClick={onRequestSignOff}
        aria-label="Request Formal Sign-Off"
        className="px-4 py-2 bg-gray-200 text-primary-color rounded hover:bg-gray-300 text-sm"
      >
        Request Formal Sign-Off
      </button>
    </div>
  </header>
);

/**
 * SurveyQuestionCard: Renders an individual survey question.
 */
const SurveyQuestionCard: FC<{
  question: SurveyQuestion;
  onSelectAnswer: (qId: string, answerId: string) => void;
  onTypeResponse: (qId: string, response: string) => void;
}> = ({ question, onSelectAnswer, onTypeResponse }) => {
  return (
    <div className="bg-white rounded-lg shadow p-4 space-y-4">
      <h2 className="font-semibold text-primary-color text-base">
        {question.prompt}
      </h2>
      {question.type === "radio" && question.answers && (
        <div className="flex flex-wrap gap-4">
          {question.answers.length === 0 ? (
            <p className="text-sm text-secondary-color">
              No answer choices provided.
            </p>
          ) : (
            question.answers.map((ans) => {
              const selected = question.selectedAnswer === ans.id;
              return (
                <label
                  key={ans.id}
                  className={`flex items-center gap-2 p-2 border rounded-lg cursor-pointer transition duration-150 ${
                    selected
                      ? "bg-blue-50 border-blue-600"
                      : "bg-white border-divider-color hover:border-gray-400"
                  }`}
                >
                  <input
                    type="radio"
                    name={`q-${question.id}`}
                    checked={selected}
                    onChange={() => onSelectAnswer(question.id, ans.id)}
                    className="hidden"
                  />
                  {ans.imageUrl && (
                    <img
                      src={ans.imageUrl}
                      alt={ans.label}
                      className="w-16 h-16 object-cover rounded"
                    />
                  )}
                  <span className="text-sm text-primary-color lowercase">
                    {ans.label}
                  </span>
                </label>
              );
            })
          )}
        </div>
      )}
      {question.type === "text" && (
        <textarea
          className="w-full border border-divider-color rounded p-2 text-sm text-primary-color"
          rows={3}
          placeholder={question.placeholder}
          value={question.typedResponse || ""}
          onChange={(e: ChangeEvent<HTMLTextAreaElement>) =>
            onTypeResponse(question.id, e.target.value)
          }
          aria-label="Text Response"
        />
      )}
      {question.type !== "radio" && question.type !== "text" && (
        <p className="text-red-500">
          Unknown question type: <strong>{question.type}</strong>
        </p>
      )}
    </div>
  );
};

/**
 * ReviewerCommentCard: Renders a single reviewer comment with a reply option.
 */
const ReviewerCommentCard: FC<{
  comment: ReviewerComment;
  onSuggestion: (id: number, suggestion: string) => void;
}> = ({ comment, onSuggestion }) => {
  const [replyOpen, setReplyOpen] = useState<boolean>(false);
  const [replyText, setReplyText] = useState<string>("");

  const toggleReply = useCallback(() => {
    setReplyOpen(prev => !prev);
  }, []);

  const handleSendReply = useCallback(() => {
    // In production, you might send this reply to an API.
    alert(`Reply sent for comment ID ${comment.id}: ${replyText}`);
    setReplyText("");
    setReplyOpen(false);
  }, [comment.id, replyText]);

  return (
    <div className="border border-divider-color bg-white rounded-lg shadow p-3 space-y-2">
      <p className="text-sm font-semibold text-primary-color">{comment.name}</p>
      <p className="text-sm text-secondary-color">{comment.comment}</p>
      <div className="flex gap-2">
        <button
          onClick={() => onSuggestion(comment.id, comment.suggestion)}
          aria-label={`Suggestion: ${comment.suggestion}`}
          className={`px-3 py-1 text-sm rounded transition duration-150 ${
            comment.suggestion === "Implement Suggestions"
              ? "bg-blue-100 text-blue-700 hover:bg-blue-200"
              : "bg-green-100 text-green-700 hover:bg-green-200"
          }`}
        >
          {comment.suggestion}
        </button>
        <button
          onClick={toggleReply}
          aria-label="Reply to comment"
          className="px-3 py-1 text-sm rounded bg-gray-100 text-primary-color hover:bg-gray-200 transition duration-150"
        >
          Reply
        </button>
      </div>
      {replyOpen && (
        <div className="space-y-2">
          <textarea
            className="w-full border border-divider-color rounded p-2 text-sm text-primary-color"
            rows={2}
            placeholder="Type your reply..."
            value={replyText}
            onChange={(e: ChangeEvent<HTMLTextAreaElement>) =>
              setReplyText(e.target.value)
            }
          />
          <button
            onClick={handleSendReply}
            aria-label="Send Reply"
            className="px-3 py-1 text-sm rounded bg-blue-600 text-white hover:bg-blue-700 transition duration-150"
          >
            Send
          </button>
        </div>
      )}
    </div>
  );
};

/**
 * ReviewerCommentsPanel: Renders the entire panel of reviewer comments.
 */
const ReviewerCommentsPanel: FC<{
  comments: ReviewerComment[];
  onSuggestion: (id: number, suggestion: string) => void;
}> = ({ comments, onSuggestion }) => (
  <aside className="w-full lg:w-80 space-y-6">
    <h2 className="text-lg font-semibold text-primary-color">
      Comments from Reviewers
    </h2>
    {comments.length === 0 ? (
      <div className="bg-white rounded-lg shadow p-3">
        <p className="text-sm text-secondary-color">No comments available.</p>
      </div>
    ) : (
      comments.map((rev) => (
        <ReviewerCommentCard
          key={rev.id}
          comment={rev}
          onSuggestion={onSuggestion}
        />
      ))
    )}
  </aside>
);

/**
 * ActionRow: Renders the bottom action buttons.
 */
const ActionRow: FC<{
  onReturn: () => void;
  onSubmit: () => void;
}> = ({ onReturn, onSubmit }) => (
  <div className="flex flex-col sm:flex-row sm:justify-end gap-4">
    <button
      onClick={onReturn}
      aria-label="Return for Edits"
      className="px-4 py-2 bg-gray-100 text-primary-color rounded hover:bg-gray-200 text-sm"
    >
      Return for Edits
    </button>
    <button
      onClick={onSubmit}
      aria-label="Submit for Data Collection"
      className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm"
    >
      Submit for Data Collection
    </button>
  </div>
);

/* ============================================================================
   MAIN COMPONENT: SurveyApprovalPage
   ============================================================================ */

export default function SurveyApprovalPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const campaignId = searchParams.get("campaignId") || "";

  // Always call hooks unconditionally.
  const [hasMounted, setHasMounted] = useState<boolean>(false);
  useEffect(() => {
    setHasMounted(true);
  }, []);

  const [survey, dispatch] = useReducer(surveyReducer, initialSurvey);
  const [comments] = useState<ReviewerComment[]>(initialComments);

  // Define event handlers.
  const handleSelectAnswer = useCallback(
    (qId: string, answerId: string) => {
      dispatch({ type: "SELECT_ANSWER", questionId: qId, answerId });
    },
    []
  );

  const handleTypeResponse = useCallback(
    (qId: string, response: string) => {
      dispatch({ type: "TYPE_RESPONSE", questionId: qId, response });
    },
    []
  );

  const handleRequestSignOff = useCallback(() => {
    alert("Request for formal sign-off sent!");
  }, []);

  const handleSubmitForDataCollection = useCallback(() => {
    alert("Survey submitted for data collection!");
    // Optionally navigate after submission.
    // router.push(`/brand-lift/progress?campaignId=${campaignId}`);
  }, [campaignId]);

  const handleReturnForEdits = useCallback(() => {
    router.push(`/brand-lift/survey-design?campaignId=${campaignId}`);
  }, [router, campaignId]);

  const handleSuggestionAction = useCallback(
    (commentId: number, suggestion: string) => {
      alert(`Handling suggestion "${suggestion}" for comment ID: ${commentId}`);
    },
    []
  );

  // Render the page after all hooks are called.
  return !hasMounted ? (
    <div className="p-6">
      <p className="text-gray-600">Loading Survey Approval Screen...</p>
    </div>
  ) : (
    <div className="max-w-7xl mx-auto px-6 py-6 space-y-8">
      <SurveyHeader
        campaignId={campaignId}
        survey={survey}
        onRequestSignOff={handleRequestSignOff}
      />

      <div className="flex flex-col lg:flex-row gap-8">
        {/* Left Column: Survey Questions */}
        <section className="flex-1 space-y-6">
          {survey.questions.length === 0 ? (
            <div className="bg-white rounded-lg shadow p-4">
              <p className="text-gray-700">No questions available.</p>
            </div>
          ) : (
            survey.questions.map((question) => (
              <SurveyQuestionCard
                key={question.id}
                question={question}
                onSelectAnswer={handleSelectAnswer}
                onTypeResponse={handleTypeResponse}
              />
            ))
          )}
        </section>

        {/* Right Column: Reviewer Comments */}
        <ReviewerCommentsPanel
          comments={comments}
          onSuggestion={handleSuggestionAction}
        />
      </div>

      <ActionRow
        onReturn={handleReturnForEdits}
        onSubmit={handleSubmitForDataCollection}
      />
    </div>
  );
}
"use client";

import React, { useState, useEffect, ChangeEvent } from "react";
import { useRouter } from "next/navigation";
import dynamic from "next/dynamic";
import { FaMagic } from "react-icons/fa";

// Dynamically import react-beautiful-dnd components (client-only)
const DragDropContext = dynamic(
  () => import("react-beautiful-dnd").then((mod) => mod.DragDropContext),
  { ssr: false }
);
const Droppable = dynamic(
  () => import("react-beautiful-dnd").then((mod) => mod.Droppable),
  { ssr: false }
);
const Draggable = dynamic(
  () => import("react-beautiful-dnd").then((mod) => mod.Draggable),
  { ssr: false }
);

// -----------------------------------------------------------------------------
// TYPE DEFINITIONS & CONSTANTS
// -----------------------------------------------------------------------------

// Allowed KPI keys
const ALLOWED_KPI_KEYS = [
  "adRecall",
  "brandAwareness",
  "consideration",
  "messageAssociation",
  "brandPreference",
  "purchaseIntent",
  "actionIntent",
  "recommendationIntent",
  "advocacy",
  "overall",
];

// Detailed KPI definitions (titles are in Title Case for display)
const kpis = [
  {
    key: "adRecall",
    title: "Ad Recall",
    definition: "The percentage of people who remember seeing your ad.",
    example: "After a week, 60% of viewers recall your ad's main message.",
  },
  {
    key: "brandAwareness",
    title: "Brand Awareness",
    definition: "How many people recognize or know of your brand.",
    example: "Brand name is recognized by 30% more people after the campaign.",
  },
  {
    key: "consideration",
    title: "Consideration",
    definition: "The percentage of people considering purchasing from your brand.",
    example: "25% of your audience would buy your product after seeing your campaign.",
  },
  {
    key: "messageAssociation",
    title: "Message Association",
    definition: "How strongly your key messages are linked to your brand.",
    example: "70% of viewers match your slogan to your brand.",
  },
  {
    key: "brandPreference",
    title: "Brand Preference",
    definition: "Preference for your brand over competitors.",
    example: "40% prefer your brand when offered similar products.",
  },
  {
    key: "purchaseIntent",
    title: "Purchase Intent",
    definition: "Likelihood of purchasing your product or service.",
    example: "50% plan to buy your product after seeing the ad.",
  },
  {
    key: "actionIntent",
    title: "Action Intent",
    definition: "Likelihood of taking a specific action (e.g., visiting your site).",
    example: "35% are motivated to visit your website after the campaign.",
  },
  {
    key: "recommendationIntent",
    title: "Recommendation Intent",
    definition: "Likelihood of recommending your brand to others.",
    example: "45% are willing to recommend your brand to friends and family.",
  },
  {
    key: "advocacy",
    title: "Advocacy",
    definition: "Willingness to actively promote your brand.",
    example: "20% share your brand on social media or write positive reviews.",
  },
  {
    key: "overall",
    title: "Overall Brand Lift",
    definition: "Overall brand perception change after the campaign.",
    example: "Respondents indicate whether their brand perception improved or worsened.",
  },
];

// Helper function to get the full KPI title from a key
const getKpiTitle = (key: string): string => {
  const found = kpis.find((kpi) => kpi.key === key);
  return found ? found.title : key;
};

// For answer options
interface AnswerOption {
  id: string;
  text: string; // Stored in lower-case
  imageOrGif?: string;
}

// For survey questions
interface SurveyQuestion {
  id: string;
  questionText: string; // Stored in lower-case
  questionType: "single" | "multiple";
  kpi: string;
  answers: AnswerOption[];
}

// Simple ID generator
function generateId() {
  return Math.random().toString(36).substr(2, 9);
}

// Auto-suggest question text based on KPI (returns lower-case)
function suggestQuestionText(kpiKey: string): string {
  switch (kpiKey) {
    case "adRecall":
      return "how memorable was our ad?";
    case "brandAwareness":
      return "how aware are you of our brand?";
    case "consideration":
      return "how likely are you to consider purchasing from us?";
    case "messageAssociation":
      return "how strongly do you associate our key messages with our brand?";
    case "brandPreference":
      return "which brand do you prefer among competitors?";
    case "purchaseIntent":
      return "how likely are you to buy our product?";
    case "actionIntent":
      return "how likely are you to visit our website after seeing our ad?";
    case "recommendationIntent":
      return "how likely are you to recommend our brand to others?";
    case "advocacy":
      return "how willing are you to promote our brand on social media?";
    case "overall":
      return "overall, how has your perception of our brand changed?";
    default:
      return "enter your question text here...";
  }
}

// Pre-populated questions with fixed IDs for stable hydration
const initialQuestions: SurveyQuestion[] = [
  {
    id: "q1",
    questionText: "how memorable was our ad?",
    questionType: "single",
    kpi: "adRecall",
    answers: [
      { id: "q1a1", text: "very memorable", imageOrGif: "https://media.giphy.com/media/3o7aD4f3WhLEvxKa12/giphy.gif" },
      { id: "q1a2", text: "somewhat memorable" },
      { id: "q1a3", text: "not memorable" },
    ],
  },
  {
    id: "q2",
    questionText: "how aware are you of our brand?",
    questionType: "single",
    kpi: "brandAwareness",
    answers: [
      { id: "q2a1", text: "very aware" },
      { id: "q2a2", text: "somewhat aware" },
      { id: "q2a3", text: "not aware at all" },
    ],
  },
  {
    id: "q3",
    questionText: "how likely are you to consider purchasing from us?",
    questionType: "single",
    kpi: "consideration",
    answers: [
      { id: "q3a1", text: "very likely" },
      { id: "q3a2", text: "maybe" },
      { id: "q3a3", text: "unlikely" },
    ],
  },
  {
    id: "q4",
    questionText: "how strongly do you associate our key messages with our brand?",
    questionType: "multiple",
    kpi: "messageAssociation",
    answers: [
      { id: "q4a1", text: "strong association" },
      { id: "q4a2", text: "moderate association" },
      { id: "q4a3", text: "weak association" },
      { id: "q4a4", text: "no association" },
    ],
  },
  {
    id: "q5",
    questionText: "which brand do you prefer among competitors?",
    questionType: "single",
    kpi: "brandPreference",
    answers: [
      { id: "q5a1", text: "our brand" },
      { id: "q5a2", text: "competitor a" },
      { id: "q5a3", text: "competitor b" },
      { id: "q5a4", text: "no preference" },
    ],
  },
  {
    id: "q6",
    questionText: "how likely are you to buy our product?",
    questionType: "single",
    kpi: "purchaseIntent",
    answers: [
      { id: "q6a1", text: "definitely will buy" },
      { id: "q6a2", text: "might buy" },
      { id: "q6a3", text: "won't buy" },
    ],
  },
  {
    id: "q7",
    questionText: "how likely are you to visit our website after seeing our ad?",
    questionType: "single",
    kpi: "actionIntent",
    answers: [
      { id: "q7a1", text: "very likely" },
      { id: "q7a2", text: "somewhat likely" },
      { id: "q7a3", text: "not likely" },
    ],
  },
  {
    id: "q8",
    questionText: "how likely are you to recommend our brand to others?",
    questionType: "single",
    kpi: "recommendationIntent",
    answers: [
      { id: "q8a1", text: "very likely" },
      { id: "q8a2", text: "somewhat likely" },
      { id: "q8a3", text: "not likely" },
    ],
  },
  {
    id: "q9",
    questionText: "how willing are you to promote our brand on social media?",
    questionType: "multiple",
    kpi: "advocacy",
    answers: [
      { id: "q9a1", text: "extremely willing" },
      { id: "q9a2", text: "somewhat willing" },
      { id: "q9a3", text: "not willing" },
    ],
  },
  {
    id: "q10",
    questionText: "overall, how has your perception of our brand changed?",
    questionType: "single",
    kpi: "overall",
    answers: [
      { id: "q10a1", text: "much more positive" },
      { id: "q10a2", text: "somewhat more positive" },
      { id: "q10a3", text: "unchanged" },
      { id: "q10a4", text: "worse" },
    ],
  },
];

// -----------------------------------------------------------------------------
// MAIN COMPONENT: SurveyDesignPage
// -----------------------------------------------------------------------------

export default function SurveyDesignPage() {
  const router = useRouter();
  // Flag to indicate client mount to avoid SSR mismatches
  const [hasMounted, setHasMounted] = useState(false);
  useEffect(() => {
    setHasMounted(true);
  }, []);

  // State for survey questions
  const [questions, setQuestions] = useState<SurveyQuestion[]>(initialQuestions);
  // State for collapsed cards (by question id)
  const [collapsed, setCollapsed] = useState<Record<string, boolean>>({});
  // QUESTION BUILDER STATE
  const [builderQuestionText, setBuilderQuestionText] = useState("");
  const [builderQuestionType, setBuilderQuestionType] = useState<"single" | "multiple">("single");
  const [builderKpi, setBuilderKpi] = useState<string>("adRecall");
  const [builderAnswers, setBuilderAnswers] = useState<AnswerOption[]>([
    { id: generateId(), text: "option a" },
    { id: generateId(), text: "option b" },
  ]);
  // Editing state for question builder
  const [editingQuestion, setEditingQuestion] = useState<SurveyQuestion | null>(null);
  // GIF modal state
  const [gifModalOpen, setGifModalOpen] = useState(false);
  const [gifModalAnswer, setGifModalAnswer] = useState<{ qId: string; aId: string } | null>(null);

  // Sample GIF URLs
  const sampleGifs = [
    "https://media.giphy.com/media/l0MYB8Ory7Hqefo9a/giphy.gif",
    "https://media.giphy.com/media/3o7aD4f3WhLEvxKa12/giphy.gif",
    "https://media.giphy.com/media/xT4uQqbbfYpu6bblNK/giphy.gif",
    "https://media.giphy.com/media/l3q2K5jinAlChoCLS/giphy.gif",
  ];

  // DRAG & DROP HANDLER
  const onDragEnd = (result: DropResult) => {
    if (!result.destination) return;
    const reordered = Array.from(questions);
    const [removed] = reordered.splice(result.source.index, 1);
    reordered.splice(result.destination.index, 0, removed);
    setQuestions(reordered);
  };

  // QUESTION BUILDER FUNCTIONS
  const addBuilderAnswer = () => {
    setBuilderAnswers((prev) => [
      ...prev,
      { id: generateId(), text: `option ${String.fromCharCode(97 + prev.length)}` },
    ]);
  };

  const removeBuilderAnswer = (id: string) => {
    setBuilderAnswers((prev) => prev.filter((ans) => ans.id !== id));
  };

  const applyMagicWandBuilder = () => {
    const suggestion = suggestQuestionText(builderKpi);
    setBuilderQuestionText(suggestion);
  };

  const addNewQuestion = () => {
    if (!builderQuestionText.trim()) {
      alert("Please enter a question text for the new question.");
      return;
    }
    if (builderAnswers.length < 2) {
      alert("Please have at least two answer options.");
      return;
    }
    const newQ: SurveyQuestion = {
      id: generateId(),
      questionText: builderQuestionText.trim().toLowerCase(),
      questionType: builderQuestionType,
      kpi: builderKpi,
      answers: builderAnswers.map((a) => ({
        ...a,
        text: a.text.trim().toLowerCase(),
      })),
    };
    setQuestions([...questions, newQ]);
    // Reset builder
    setBuilderQuestionText("");
    setBuilderQuestionType("single");
    setBuilderKpi("adRecall");
    setBuilderAnswers([
      { id: generateId(), text: "option a" },
      { id: generateId(), text: "option b" },
    ]);
  };

  const toggleCollapse = (id: string) => {
    setCollapsed((prev) => ({ ...prev, [id]: !prev[id] }));
  };

  // GIF modal functions
  const openGifModal = (qId: string, aId: string) => {
    setGifModalAnswer({ qId, aId });
    setGifModalOpen(true);
  };

  const closeGifModal = () => {
    setGifModalOpen(false);
    setGifModalAnswer(null);
  };

  const handleSelectGif = (gifUrl: string) => {
    if (!gifModalAnswer) return;
    const { qId, aId } = gifModalAnswer;
    setQuestions((prev) =>
      prev.map((q) => {
        if (q.id === qId) {
          const updatedAnswers = q.answers.map((ans) =>
            ans.id === aId ? { ...ans, imageOrGif: gifUrl } : ans
          );
          return { ...q, answers: updatedAnswers };
        }
        return q;
      })
    );
    closeGifModal();
  };

  const handlePreviewAndSubmit = () => {
    if (questions.length === 0) {
      alert("No questions in the survey. Please add at least one question.");
      return;
    }
    alert("Survey saved! Proceeding to preview...");
    router.push("/brand-lift/preview");
  };

  // Ensure we render only after mounting (to avoid SSR mismatches)
  if (!hasMounted) {
    return <div className="max-w-5xl mx-auto p-4">Loading...</div>;
  }

  return (
    <div className="max-w-5xl mx-auto p-4 space-y-6">
      {/* PAGE HEADER */}
      <header className="text-center">
        <h1 className="text-3xl font-bold">Survey Design</h1>
      </header>

      {/* QUESTION BUILDER SECTION */}
      <section className="border p-4 rounded bg-white shadow-sm">
        <h2 className="text-xl font-semibold mb-4">Question Builder</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <div>
            <label className="block font-medium mb-1">Select KPI</label>
            <select
              value={builderKpi}
              onChange={(e) => setBuilderKpi(e.target.value)}
              className="w-full p-2 border rounded"
            >
              {kpis.map((k) => (
                <option key={k.key} value={k.key}>
                  {k.title}
                </option>
              ))}
            </select>
          </div>
          <div>
            <label className="block font-medium mb-1">Question Type</label>
            <select
              value={builderQuestionType}
              onChange={(e) =>
                setBuilderQuestionType(e.target.value as "single" | "multiple")
              }
              className="w-full p-2 border rounded"
            >
              <option value="single">Single Choice</option>
              <option value="multiple">Multiple Choice</option>
            </select>
          </div>
        </div>
        <div className="mb-4">
          <label className="block font-medium mb-1">Question Text</label>
          <div className="flex items-center gap-2">
            <input
              type="text"
              value={builderQuestionText}
              onChange={(e) =>
                setBuilderQuestionText(e.target.value.toLowerCase())
              }
              className="w-full p-2 border rounded"
              placeholder="enter question text..."
            />
            <button
              onClick={applyMagicWandBuilder}
              className="px-3 py-2 border rounded text-yellow-600"
              title="Auto-suggest question text based on KPI"
            >
              <FaMagic />
            </button>
          </div>
        </div>
        <div>
          <label className="block font-medium mb-2">Answer Options</label>
          {builderAnswers.map((ans, idx) => (
            <div key={ans.id} className="flex items-center gap-2 mb-2">
              <input
                type="text"
                value={ans.text}
                onChange={(e) =>
                  setBuilderAnswers((prev) =>
                    prev.map((a) =>
                      a.id === ans.id ? { ...a, text: e.target.value.toLowerCase() } : a
                    )
                  )
                }
                className="flex-grow p-2 border rounded"
                placeholder={`option ${idx + 1}`}
              />
              <button
                onClick={() => removeBuilderAnswer(ans.id)}
                className="px-2 py-1 border rounded text-red-600 text-sm"
              >
                Remove
              </button>
            </div>
          ))}
          <button
            onClick={addBuilderAnswer}
            className="mt-2 px-3 py-1 bg-blue-600 text-white rounded text-sm"
          >
            + Add Option
          </button>
        </div>
        <div className="mt-4 text-right">
          <button
            onClick={addNewQuestion}
            className="px-4 py-2 bg-green-600 text-white rounded"
          >
            Add Question
          </button>
        </div>
      </section>

      {/* DRAG & DROP: SURVEY QUESTIONS */}
      <DragDropContext onDragEnd={onDragEnd}>
        <Droppable droppableId="surveyQuestions" isDropDisabled={false} isCombineEnabled={false}>
          {(provided) => (
            <section
              {...provided.droppableProps}
              ref={provided.innerRef}
              className="space-y-4"
            >
              {questions.map((q, index) => (
                <Draggable key={q.id} draggableId={q.id} index={index}>
                  {(draggableProvided) => (
                    <div
                      ref={draggableProvided.innerRef}
                      {...draggableProvided.draggableProps}
                      className="border p-4 rounded bg-white shadow-sm"
                    >
                      {/* HEADER: Drag handle, question text, KPI, and actions */}
                      <div className="flex justify-between items-center">
                        <div
                          {...draggableProvided.dragHandleProps}
                          className="cursor-move p-1"
                        >
                          <span className="text-gray-400 text-xl">≡</span>
                        </div>
                        <div className="flex-grow ml-2">
                          <h3 className="text-lg font-semibold lowercase">
                            {index + 1}. {q.questionText}
                          </h3>
                          <div className="text-sm text-gray-600 flex items-center gap-2">
                            <span>
                              <strong>KPI:</strong> {getKpiTitle(q.kpi)}
                            </span>
                            {ALLOWED_KPI_KEYS.includes(q.kpi) ? (
                              <button
                                className="text-yellow-500"
                                onClick={() => {
                                  const suggested = suggestQuestionText(q.kpi);
                                  const updatedQ = {
                                    ...q,
                                    questionText: suggested.toLowerCase(),
                                  };
                                  setQuestions((prev) =>
                                    prev.map((x) => (x.id === q.id ? updatedQ : x))
                                  );
                                }}
                                title="Auto-suggest question text"
                              >
                                <FaMagic />
                              </button>
                            ) : (
                              <span className="text-red-600" title="Invalid KPI">
                                ⚠️
                              </span>
                            )}
                          </div>
                        </div>
                        <div className="flex gap-2">
                          <button
                            onClick={() => setEditingQuestion(q)}
                            className="px-3 py-1 border rounded text-blue-600 text-sm"
                          >
                            Edit
                          </button>
                          <button
                            onClick={() =>
                              setQuestions((prev) => prev.filter((qq) => qq.id !== q.id))
                            }
                            className="px-3 py-1 border rounded text-red-600 text-sm"
                          >
                            Remove
                          </button>
                          <button
                            onClick={() => toggleCollapse(q.id)}
                            className="px-3 py-1 border rounded text-sm"
                          >
                            {collapsed[q.id] ? "Expand" : "Collapse"}
                          </button>
                        </div>
                      </div>
                      {/* COLLAPSIBLE BODY */}
                      {!collapsed[q.id] && (
                        <div className="mt-3 space-y-2">
                          <p className="text-sm text-gray-700">
                            Question type:{" "}
                            {q.questionType === "single" ? "Single Choice" : "Multiple Choice"}
                          </p>
                          {/* Answer Options */}
                          <div className="flex flex-wrap gap-4">
                            {q.answers.map((ans) => (
                              <div key={ans.id} className="flex flex-col items-center">
                                {ans.imageOrGif ? (
                                  <img
                                    src={ans.imageOrGif}
                                    alt="gif"
                                    className="w-36 h-36 object-cover rounded"
                                  />
                                ) : (
                                  <div className="w-36 h-36 bg-gray-100 flex items-center justify-center rounded text-xs text-gray-500">
                                    no gif
                                  </div>
                                )}
                                <div className="mt-1 text-center text-sm lowercase">
                                  {ans.text}
                                </div>
                                <button
                                  onClick={() => openGifModal(q.id, ans.id)}
                                  className="mt-2 px-2 py-1 border rounded text-blue-600 text-sm"
                                >
                                  {ans.imageOrGif ? "Change GIF" : "Add GIF"}
                                </button>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                      {draggableProvided.placeholder}
                    </div>
                  )}
                </Draggable>
              ))}
              {provided.placeholder}
            </section>
          )}
        </Droppable>
      </DragDropContext>

      {/* PREVIEW & SUBMIT BUTTON */}
      <div className="text-center mt-6">
        <button
          onClick={handlePreviewAndSubmit}
          className="px-4 py-2 bg-green-600 text-white rounded"
        >
          Preview & Submit
        </button>
      </div>

      {/* EDIT QUESTION MODAL */}
      {editingQuestion && (
        <EditQuestionModal
          question={editingQuestion}
          onClose={() => setEditingQuestion(null)}
          onSave={(updated) =>
            setQuestions((prev) =>
              prev.map((q) => (q.id === updated.id ? updated : q))
            )
          }
        />
      )}

      {/* GIF MODAL */}
      {gifModalOpen && gifModalAnswer && (
        <GifModal
          onClose={closeGifModal}
          onSelectGif={handleSelectGif}
          sampleGifs={sampleGifs}
        />
      )}
    </div>
  );
}

// -----------------------------------------------------------------------------
// EDIT QUESTION MODAL COMPONENT
// -----------------------------------------------------------------------------

interface EditQuestionModalProps {
  question: SurveyQuestion;
  onClose: () => void;
  onSave: (updated: SurveyQuestion) => void;
}

function EditQuestionModal({ question, onClose, onSave }: EditQuestionModalProps) {
  const [localQ, setLocalQ] = useState<SurveyQuestion>({ ...question });

  const updateAnswerText = (aId: string, text: string) => {
    setLocalQ((prev) => ({
      ...prev,
      answers: prev.answers.map((ans) =>
        ans.id === aId ? { ...ans, text: text.toLowerCase() } : ans
      ),
    }));
  };

  const addAnswerOption = () => {
    setLocalQ((prev) => ({
      ...prev,
      answers: [...prev.answers, { id: generateId(), text: "new option", imageOrGif: "" }],
    }));
  };

  const removeAnswerOption = (aId: string) => {
    setLocalQ((prev) => ({
      ...prev,
      answers: prev.answers.filter((ans) => ans.id !== aId),
    }));
  };

  const handleSave = () => {
    if (!localQ.questionText.trim()) {
      alert("Question text cannot be empty.");
      return;
    }
    if (localQ.answers.length < 2) {
      alert("At least 2 answer options are required.");
      return;
    }
    const finalQ = {
      ...localQ,
      questionText: localQ.questionText.trim().toLowerCase(),
      answers: localQ.answers.map((ans) => ({
        ...ans,
        text: ans.text.trim().toLowerCase(),
      })),
    };
    onSave(finalQ);
    onClose();
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white p-6 rounded w-full max-w-lg">
        <h2 className="text-xl font-bold mb-4">Edit Question</h2>
        {/* Question Text */}
        <div className="mb-4">
          <label className="block font-medium mb-1">Question Text</label>
          <input
            type="text"
            value={localQ.questionText}
            onChange={(e) => setLocalQ({ ...localQ, questionText: e.target.value })}
            className="w-full p-2 border rounded lowercase"
          />
        </div>
        {/* Question Type */}
        <div className="mb-4">
          <label className="block font-medium mb-1">Question Type</label>
          <select
            value={localQ.questionType}
            onChange={(e) =>
              setLocalQ({ ...localQ, questionType: e.target.value as "single" | "multiple" })
            }
            className="w-full p-2 border rounded"
          >
            <option value="single">Single Choice</option>
            <option value="multiple">Multiple Choice</option>
          </select>
        </div>
        {/* KPI Selection */}
        <div className="mb-4">
          <label className="block font-medium mb-1">KPI</label>
          <select
            value={localQ.kpi}
            onChange={(e) => setLocalQ({ ...localQ, kpi: e.target.value })}
            className="w-full p-2 border rounded"
          >
            {kpis.map((k) => (
              <option key={k.key} value={k.key}>
                {k.title}
              </option>
            ))}
          </select>
        </div>
        {/* Answer Options */}
        <div>
          <h3 className="font-semibold mb-2">Answer Options</h3>
          {localQ.answers.map((ans) => (
            <div key={ans.id} className="flex items-center gap-2 mb-2">
              <input
                type="text"
                value={ans.text}
                onChange={(e) => updateAnswerText(ans.id, e.target.value)}
                className="flex-grow p-2 border rounded lowercase"
                placeholder="answer text..."
              />
              <button
                onClick={() => removeAnswerOption(ans.id)}
                className="px-2 py-1 border rounded text-red-600 text-sm"
              >
                Remove
              </button>
            </div>
          ))}
          <button
            onClick={addAnswerOption}
            className="mt-2 px-3 py-1 bg-blue-600 text-white rounded text-sm"
          >
            + Add Option
          </button>
        </div>
        {/* Footer: Cancel & Save */}
        <div className="flex justify-end gap-4 mt-6">
          <button onClick={onClose} className="px-4 py-2 border rounded text-gray-600">
            Cancel
          </button>
          <button onClick={handleSave} className="px-4 py-2 bg-green-600 text-white rounded">
            Save
          </button>
        </div>
      </div>
    </div>
  );
}

// -----------------------------------------------------------------------------
// GIF MODAL COMPONENT
// -----------------------------------------------------------------------------

interface GifModalProps {
  onClose: () => void;
  onSelectGif: (gifUrl: string) => void;
  sampleGifs: string[];
}

function GifModal({ onClose, onSelectGif, sampleGifs }: GifModalProps) {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50 p-4">
      <div className="bg-white p-4 rounded w-full max-w-md">
        <h3 className="text-lg font-bold mb-2">Select a GIF</h3>
        <div className="flex flex-wrap gap-2 justify-center">
          {sampleGifs.map((gifUrl) => (
            <img
              key={gifUrl}
              src={gifUrl}
              alt="gif"
              className="cursor-pointer border border-gray-200 rounded w-32 h-32 object-cover"
              onClick={() => onSelectGif(gifUrl)}
            />
          ))}
        </div>
        <div className="mt-4 flex justify-between">
          <button
            onClick={onClose}
            className="px-4 py-2 bg-gray-500 text-white rounded"
          >
            Cancel
          </button>
          <label className="px-4 py-2 bg-blue-600 text-white rounded cursor-pointer">
            Upload GIF
            <input
              type="file"
              accept="image/*,video/mp4"
              onChange={(e: ChangeEvent<HTMLInputElement>) => {
                if (e.target.files && e.target.files[0]) {
                  const fileUrl = URL.createObjectURL(e.target.files[0]);
                  onSelectGif(fileUrl);
                }
              }}
              className="hidden"
            />
          </label>
        </div>
      </div>
    </div>
  );
}
