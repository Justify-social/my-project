generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CampaignWizardSubmission {
  id                   Int                   @id @default(autoincrement())
  campaignName         String
  description          String                @db.VarChar(3000)
  startDate            DateTime
  endDate              DateTime
  timeZone             String
  contacts             String
  currency             Currency
  totalBudget          Float
  socialMediaBudget    Float
  platform             Platform
  influencerHandle     String
  primaryContactId     Int                   @unique
  secondaryContactId   Int                   @unique
  mainMessage          String                @db.VarChar(3000)
  hashtags             String
  memorability         String
  keyBenefits          String
  expectedAchievements String
  purchaseIntent       String
  brandPerception      String
  primaryKPI           KPI
  secondaryKPIs        KPI[]
  features             Feature[]
  submissionStatus     SubmissionStatus      @default(draft)
  createdAt            DateTime              @default(now())
  audience             Audience?
  primaryContact       PrimaryContact        @relation("PrimaryContactSubmission", fields: [primaryContactId], references: [id])
  secondaryContact     SecondaryContact      @relation("SecondaryContactSubmission", fields: [secondaryContactId], references: [id])
  creativeAssets       CreativeAsset[]
  creativeRequirements CreativeRequirement[]
  userId               String?
  user                 User?                 @relation(fields: [userId], references: [id])
}

model PrimaryContact {
  id         Int                       @id @default(autoincrement())
  firstName  String
  surname    String
  email      String
  position   Position
  submission CampaignWizardSubmission? @relation("PrimaryContactSubmission")
}

model SecondaryContact {
  id         Int                       @id @default(autoincrement())
  firstName  String
  surname    String
  email      String
  position   Position
  submission CampaignWizardSubmission? @relation("SecondaryContactSubmission")
}

model Audience {
  id                 Int                         @id @default(autoincrement())
  campaignId         Int                         @unique
  age1824            Int
  age2534            Int
  age3544            Int
  age4554            Int
  age5564            Int
  age65plus          Int
  otherGender        String
  educationLevel     String
  jobTitles          String
  incomeLevel        String
  campaign           CampaignWizardSubmission    @relation(fields: [campaignId], references: [id])
  competitors        AudienceCompetitor[]
  genders            AudienceGender[]
  languages          AudienceLanguage[]
  locations          AudienceLocation[]
  screeningQuestions AudienceScreeningQuestion[]
}

model AudienceLocation {
  id         Int      @id @default(autoincrement())
  audienceId Int
  location   String
  audience   Audience @relation(fields: [audienceId], references: [id])
}

model AudienceGender {
  id         Int      @id @default(autoincrement())
  audienceId Int
  gender     String
  audience   Audience @relation(fields: [audienceId], references: [id])
}

model AudienceScreeningQuestion {
  id         Int      @id @default(autoincrement())
  audienceId Int
  question   String
  audience   Audience @relation(fields: [audienceId], references: [id])
}

model AudienceLanguage {
  id         Int      @id @default(autoincrement())
  audienceId Int
  language   String
  audience   Audience @relation(fields: [audienceId], references: [id])
}

model AudienceCompetitor {
  id         Int      @id @default(autoincrement())
  audienceId Int
  competitor String
  audience   Audience @relation(fields: [audienceId], references: [id])
}

model CreativeAsset {
  id                  String                   @id @default(cuid())
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  type                String
  url                 String
  fileName            String
  fileSize            Int?
  assetName           String
  influencerHandle    String?
  influencerName      String?
  influencerFollowers String?
  whyInfluencer       String?
  budget              Float?
  submissionId        Int
  submission          CampaignWizardSubmission @relation(fields: [submissionId], references: [id])

  @@index([submissionId])
}

model CreativeRequirement {
  id           Int                      @id @default(autoincrement())
  requirement  String
  submissionId Int
  submission   CampaignWizardSubmission @relation(fields: [submissionId], references: [id])
}

enum Currency {
  GBP
  USD
  EUR
}

enum Platform {
  Instagram
  YouTube
  TikTok
}

enum KPI {
  adRecall
  brandAwareness
  consideration
  messageAssociation
  brandPreference
  purchaseIntent
  actionIntent
  recommendationIntent
  advocacy
}

enum Feature {
  CREATIVE_ASSET_TESTING
  BRAND_LIFT
  BRAND_HEALTH
  MIXED_MEDIA_MODELLING
}

enum Position {
  Manager
  Director
  VP
}

enum CreativeAssetType {
  image
  video
}

enum SubmissionStatus {
  draft
  submitted
}

model User {
  id                String             @id @default(cuid())
  auth0Id           String             @unique
  email             String             @unique
  firstName         String?
  surname           String?
  companyName       String?
  profilePictureUrl String?
  role              UserRole           @default(USER)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  notificationPrefs NotificationPrefs?
  campaigns         CampaignWizardSubmission[]
  teamInvitations   TeamInvitation[]   @relation("ReceivedInvitations")
  sentInvitations   TeamInvitation[]   @relation("SentInvitations")
  teamMembers       TeamMember[]       @relation("TeamOwner")
  memberOf          TeamMember[]       @relation("TeamMember")
}

model NotificationPrefs {
  id                    Int     @id @default(autoincrement())
  userId                String  @unique
  campaignUpdates       Boolean @default(false)
  brandHealthAlerts     Boolean @default(false)
  aiInsightNotifications Boolean @default(false)
  user                  User    @relation(fields: [userId], references: [id])
}

model TeamMember {
  id        String   @id @default(cuid())
  ownerId   String
  memberId  String
  role      TeamRole @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owner     User     @relation("TeamOwner", fields: [ownerId], references: [id])
  member    User     @relation("TeamMember", fields: [memberId], references: [id])
}

model TeamInvitation {
  id          String                @id @default(cuid())
  email       String
  status      InvitationStatus      @default(PENDING)
  inviterId   String
  inviteeId   String?
  role        TeamRole              @default(MEMBER)
  createdAt   DateTime              @default(now())
  expiresAt   DateTime
  inviter     User                  @relation("SentInvitations", fields: [inviterId], references: [id])
  invitee     User?                 @relation("ReceivedInvitations", fields: [inviteeId], references: [id])
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

model BrandingSettings {
  id              String  @id @default(cuid())
  companyId       String  @unique
  primaryColor    String
  secondaryColor  String
  headerFont      String
  headerFontSize  String
  bodyFont        String
  bodyFontSize    String
  logoUrl         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
