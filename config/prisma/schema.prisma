generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CampaignWizard {
  id               String          @id
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  currentStep      Int             @default(1)
  isComplete       Boolean         @default(false)
  status           Status          @default(DRAFT)
  name             String          @db.VarChar(255)
  businessGoal     String
  brand            String
  website          String?
  startDate        DateTime
  endDate          DateTime
  timeZone         String
  primaryContact   Json
  secondaryContact Json?
  additionalContacts Json?
  budget           Json
  step1Complete    Boolean         @default(false)
  primaryKPI       KPI?
  secondaryKPIs    KPI[]
  messaging        Json?
  expectedOutcomes Json?
  features         Feature[]
  step2Complete    Boolean         @default(false)
  demographics     Json?
  locations        Json[]
  targeting        Json?
  competitors      String[]
  step3Complete    Boolean         @default(false)
  // Assets field now stores an array of objects, each containing:
  // - Asset details (url, name, type, etc.)
  // - associatedInfluencerIds: String[] (IDs linking to Influencer model)
  // - rationale: String? ("Why this content?")
  // - budget: Float?
  assets           Json[]
  targetPlatforms  Platform[]      // Target platforms for influencer discovery
  step4Complete    Boolean         @default(false)
  userId           String?         @map("userId")
  user             User?           @relation(fields: [userId], references: [id])
  Influencer       Influencer[]
  WizardHistory    WizardHistory[]

  @@index([status, createdAt])
}

model Influencer {
  id             String         @id
  platform       Platform
  handle         String
  platformId     String?
  campaignId     String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  CampaignWizard CampaignWizard @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId])
}

model WizardHistory {
  id             String         @id
  wizardId       String
  step           Int
  action         String
  changes        Json
  performedBy    String
  timestamp      DateTime       @default(now())
  CampaignWizard CampaignWizard @relation(fields: [wizardId], references: [id])

  @@index([wizardId, timestamp])
}

model CampaignWizardSubmission {
  id                   Int                   @id @default(autoincrement())
  campaignName         String
  description          String                @db.VarChar(3000)
  startDate            DateTime
  endDate              DateTime
  timeZone             String
  contacts             String
  currency             Currency
  totalBudget          Float
  socialMediaBudget    Float
  platform             Platform
  influencerHandle     String
  primaryContactId     Int                   @unique
  secondaryContactId   Int?                  @unique
  mainMessage          String                @db.VarChar(3000)
  hashtags             String
  memorability         String
  keyBenefits          String
  expectedAchievements String
  purchaseIntent       String
  brandPerception      String
  primaryKPI           KPI
  secondaryKPIs        KPI[]
  features             Feature[]
  submissionStatus     SubmissionStatus      @default(draft)
  createdAt            DateTime              @default(now())
  userId               String?
  audience             Audience[]
  primaryContact       PrimaryContact        @relation(fields: [primaryContactId], references: [id])
  secondaryContact     SecondaryContact?     @relation(fields: [secondaryContactId], references: [id])
  user                 User?                 @relation(fields: [userId], references: [id])
  creativeAssets       CreativeAsset[]
  creativeRequirements CreativeRequirement[]
}

model PrimaryContact {
  id                       Int                       @id @default(autoincrement())
  firstName                String
  surname                  String
  email                    String
  position                 Position
  CampaignWizardSubmission CampaignWizardSubmission?
}

model SecondaryContact {
  id                       Int                       @id @default(autoincrement())
  firstName                String
  surname                  String
  email                    String
  position                 Position
  CampaignWizardSubmission CampaignWizardSubmission?
}

model Audience {
  id                 Int                         @id @default(autoincrement())
  ageRangeMin        Int
  ageRangeMax        Int
  keywords           String[]
  interests          String[]
  campaignId         Int
  age1824            Int                        @default(0)
  age2534            Int                        @default(0)
  age3544            Int                        @default(0)
  age4554            Int                        @default(0)
  age5564            Int                        @default(0)
  age65plus          Int                        @default(0)
  campaign           CampaignWizardSubmission    @relation(fields: [campaignId], references: [id])
  competitors        AudienceCompetitor[]
  gender             AudienceGender[]
  languages          AudienceLanguage[]
  geographicSpread   AudienceLocation[]
  screeningQuestions AudienceScreeningQuestion[]
}

model AudienceLocation {
  id         Int      @id @default(autoincrement())
  country    String
  proportion Float
  audienceId Int
  audience   Audience @relation(fields: [audienceId], references: [id])
}

model AudienceGender {
  id         Int      @id @default(autoincrement())
  gender     String
  proportion Float
  audienceId Int
  audience   Audience @relation(fields: [audienceId], references: [id])
}

model AudienceScreeningQuestion {
  id         Int      @id @default(autoincrement())
  question   String
  audienceId Int
  audience   Audience @relation(fields: [audienceId], references: [id])
}

model AudienceLanguage {
  id         Int      @id @default(autoincrement())
  language   String
  audienceId Int
  audience   Audience @relation(fields: [audienceId], references: [id])
}

model AudienceCompetitor {
  id         Int      @id @default(autoincrement())
  name       String
  audienceId Int
  audience   Audience @relation(fields: [audienceId], references: [id])
}

model CreativeAsset {
  id           Int                      @id @default(autoincrement())
  name         String
  description  String
  url          String
  type         CreativeAssetType
  fileSize     Int
  dimensions   String?
  duration     Int?
  format       String
  submissionId Int
  submission   CampaignWizardSubmission @relation(fields: [submissionId], references: [id])
}

model CreativeRequirement {
  id           Int                      @id @default(autoincrement())
  description  String
  mandatory    Boolean
  submissionId Int
  submission   CampaignWizardSubmission @relation(fields: [submissionId], references: [id])
}

model User {
  id                  String                     @id @default(uuid())
  clerkId             String                     @unique
  email               String                     @unique
  name                String?
  role                UserRole                   @default(USER)
  campaigns           CampaignWizard[]
  submissions         CampaignWizardSubmission[]
  notificationPrefs   NotificationPrefs?
  brandingSettings    BrandingSettings?
  receivedInvitations TeamInvitation[]           @relation("InvitationReceiver")
  sentInvitations     TeamInvitation[]           @relation("InvitationSender")
  memberOfTeams       TeamMember[]               @relation("TeamMember")
  ownedTeamMembers    TeamMember[]               @relation("TeamOwner")
}

model NotificationPrefs {
  id                     Int     @id @default(autoincrement())
  userId                 String  @unique
  campaignUpdates        Boolean @default(false)
  brandHealthAlerts      Boolean @default(false)
  aiInsightNotifications Boolean @default(false)
  user                   User    @relation(fields: [userId], references: [id])
}

model TeamMember {
  id        String   @id @default(uuid())
  ownerId   String
  memberId  String
  role      TeamRole @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  member    User     @relation("TeamMember", fields: [memberId], references: [id])
  owner     User     @relation("TeamOwner", fields: [ownerId], references: [id])
}

model TeamInvitation {
  id        String           @id @default(uuid())
  email     String
  status    InvitationStatus @default(PENDING)
  inviterId String
  inviteeId String?
  role      TeamRole         @default(MEMBER)
  createdAt DateTime         @default(now())
  expiresAt DateTime
  invitee   User?            @relation("InvitationReceiver", fields: [inviteeId], references: [id])
  inviter   User             @relation("InvitationSender", fields: [inviterId], references: [id])
}

model BrandingSettings {
  id             String   @id @default(uuid())
  userId         String   @unique
  primaryColor   String
  secondaryColor String
  accentColor    String
  headerFont     String
  bodyFont       String
  logoUrl        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

enum Platform {
  INSTAGRAM
  YOUTUBE
  TIKTOK
}

enum KPI {
  AD_RECALL
  BRAND_AWARENESS
  CONSIDERATION
  MESSAGE_ASSOCIATION
  BRAND_PREFERENCE
  PURCHASE_INTENT
  ACTION_INTENT
  RECOMMENDATION_INTENT
  ADVOCACY
}

enum Feature {
  CREATIVE_ASSET_TESTING
  BRAND_LIFT
  BRAND_HEALTH
  MIXED_MEDIA_MODELING
}

enum Status {
  DRAFT
  IN_REVIEW
  APPROVED
  ACTIVE
  COMPLETED
}

enum Currency {
  GBP
  USD
  EUR
}

enum Position {
  VP
  Director
  Manager
  Researcher
  Associate
}

enum CreativeAssetType {
  image
  video
}

enum SubmissionStatus {
  draft
  submitted
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

// New model for storing persistent influencer profile data for the marketplace
model MarketplaceInfluencer {
  id                        String    @id @default(uuid()) // Internal Justify ID
  name                      String
  handle                    String 
  avatarUrl                 String?
  platforms                 Platform[] 
  followersCount            Int?      
  justifyScore              Float?    
  isPhylloVerified          Boolean?  
  primaryAudienceLocation String?   
  primaryAudienceAgeRange String?   
  primaryAudienceGender     String?   
  engagementRate            Float?    
  audienceQualityIndicator  String?   
  bio                       String?   
  contactEmail              String?   
  phylloUserId              String?   @unique // Link to Phyllo User entity
  audienceDemographics      Json?     
  engagementMetrics         Json?     
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  phylloDataLastRefreshedAt DateTime? 
  
  phylloAccountLinks        PhylloAccountLink[] // Relation to linked Phyllo accounts

  @@index([justifyScore]) 
  @@index([followersCount]) 
  @@index([primaryAudienceLocation]) 
  @@index([primaryAudienceAgeRange]) 
  @@index([isPhylloVerified]) 
  @@index([platforms]) 
  @@index([handle]) 
  @@index([phylloUserId]) // Index for lookup
}

// New table for mapping MarketplaceInfluencer to specific Phyllo Platform Accounts
model PhylloAccountLink {
  id                      String   @id @default(uuid())
  marketplaceInfluencerId String   // Foreign Key to MarketplaceInfluencer.id
  phylloAccountId         String   @unique // The unique ID for the connected platform account from Phyllo
  phylloUserId            String   // The Phyllo User ID this account belongs to (for consistency/lookup)
  platform                Platform // The platform type (e.g., INSTAGRAM, TIKTOK)
  status                  String   // Status of the link (e.g., "CONNECTED", "DISCONNECTED", "ERROR")
  connectedAt             DateTime @default(now())
  disconnectedAt          DateTime?
  metadata                Json?    // Store extra info from Phyllo if needed (e.g., platform username)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  marketplaceInfluencer   MarketplaceInfluencer @relation(fields: [marketplaceInfluencerId], references: [id], onDelete: Cascade) // Relation back to our influencer

  @@index([marketplaceInfluencerId])
  @@index([phylloUserId]) // Useful for finding all accounts for a Phyllo user
  @@index([status]) // Useful for finding active links
}
