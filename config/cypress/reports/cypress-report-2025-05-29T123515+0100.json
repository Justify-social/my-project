{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2025-05-29T11:34:54.518Z",
    "end": "2025-05-29T11:35:15.734Z",
    "duration": 21216,
    "testsRegistered": 8,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 7,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "ef249b38-1849-4a50-b0f3-9ef9e6b2564a",
      "title": "",
      "fullFile": "config/cypress/e2e/dashboard/api.cy.js",
      "file": "config/cypress/e2e/dashboard/api.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "65ed674e-d7d0-49dc-a0d2-e03662fc7c1b",
          "title": "Dashboard API Integration",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "loads campaign data from API",
              "fullTitle": "Dashboard API Integration loads campaign data from API",
              "timedOut": null,
              "duration": 10500,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Verify that campaign cards are displayed with the mock data\ncy.get('[data-cy=\"campaign-card\"]').should('have.length.at.least', 1);",
              "err": {
                "message": "CypressError: Timed out retrying after 10000ms: `cy.wait()` timed out waiting `10000ms` for the 1st request to the route: `getCampaigns`. No request ever occurred.\n\nhttps://on.cypress.io/wait\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Dashboard API Integration`",
                "estack": "CypressError: Timed out retrying after 10000ms: `cy.wait()` timed out waiting `10000ms` for the 1st request to the route: `getCampaigns`. No request ever occurred.\n\nhttps://on.cypress.io/wait\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Dashboard API Integration`\n    at cypressErr (http://localhost:3000/__cypress/runner/cypress_runner.js:77162:18)\n    at Object.errByPath (http://localhost:3000/__cypress/runner/cypress_runner.js:77216:10)\n    at checkForXhr (http://localhost:3000/__cypress/runner/cypress_runner.js:138424:84)\n    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:138450:28)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:3000/__cypress/runner/cypress_runner.js:4285:29)\n    at whenStable (http://localhost:3000/__cypress/runner/cypress_runner.js:146806:68)\n    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:146747:14)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise._settlePromiseFromHandler (http://localhost:3000/__cypress/runner/cypress_runner.js:1489:31)\n    at Promise._settlePromise (http://localhost:3000/__cypress/runner/cypress_runner.js:1546:18)\n    at Promise._settlePromise0 (http://localhost:3000/__cypress/runner/cypress_runner.js:1591:10)\n    at Promise._settlePromises (http://localhost:3000/__cypress/runner/cypress_runner.js:1671:18)\n    at Promise._fulfill (http://localhost:3000/__cypress/runner/cypress_runner.js:1615:18)\n    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:5420:46)\nFrom Your Spec Code:\n    at Context.eval (webpack://my-project/./config/cypress/e2e/dashboard/api.cy.js:18:7)",
                "diff": null
              },
              "uuid": "2a7fd3d1-d4f3-4c54-9aaa-84eea64a6a35",
              "parentUUID": "65ed674e-d7d0-49dc-a0d2-e03662fc7c1b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shows correct metrics from API response",
              "fullTitle": "Dashboard API Integration shows correct metrics from API response",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Verify that metrics display the mock data values\ncy.get('[data-cy=\"metric-card\"]').contains('Total Campaigns').parent().within(() => {\n  cy.get('p.text-2xl').should('contain', '154');\n});\ncy.get('[data-cy=\"metric-card\"]').contains('Survey Responses').parent().within(() => {\n  cy.get('p.text-2xl').should('contain', '3000');\n});",
              "err": {},
              "uuid": "b1ec1d2b-3f46-42e1-b983-d4bca81fac3c",
              "parentUUID": "65ed674e-d7d0-49dc-a0d2-e03662fc7c1b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "handles API error states gracefully",
              "fullTitle": "Dashboard API Integration handles API error states gracefully",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Refresh the page with a different intercept for error\ncy.intercept('GET', '/api/campaigns', {\n  statusCode: 500,\n  body: {\n    error: 'Internal Server Error'\n  }\n}).as('getCampaignsError');\ncy.visit('/dashboard');\ncy.wait('@getCampaignsError');\n// Check that an error message is displayed\ncy.contains(/error|failed/i).should('exist');",
              "err": {},
              "uuid": "29c0a94c-56b7-48b9-ac38-6d09505a7e71",
              "parentUUID": "65ed674e-d7d0-49dc-a0d2-e03662fc7c1b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "handles empty campaign data gracefully",
              "fullTitle": "Dashboard API Integration handles empty campaign data gracefully",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Refresh with empty campaigns data\ncy.intercept('GET', '/api/campaigns', {\n  statusCode: 200,\n  body: {\n    success: true,\n    campaigns: []\n  }\n}).as('getEmptyCampaigns');\ncy.visit('/dashboard');\ncy.wait('@getEmptyCampaigns');\n// Verify empty state is displayed\ncy.get('[data-cy=\"upcoming-campaigns-card\"]').should('exist');\ncy.get('[data-cy=\"upcoming-campaigns-card\"]').contains('No upcoming campaigns').should('exist');",
              "err": {},
              "uuid": "e2f24fbb-c3a8-405f-84da-48faac6b981d",
              "parentUUID": "65ed674e-d7d0-49dc-a0d2-e03662fc7c1b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "renders campaign calendar with API data",
              "fullTitle": "Dashboard API Integration renders campaign calendar with API data",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Verify calendar events are rendered\ncy.get('[data-cy=\"calendar-dashboard\"]').should('exist');\n// Check if calendar events are displayed (this would depend on your mock data)\ncy.get('[data-cy=\"calendar-dashboard\"]').find('.calendar-event').should('exist');",
              "err": {},
              "uuid": "7360419e-e3e7-48f4-a5b2-e44ee4e730e2",
              "parentUUID": "65ed674e-d7d0-49dc-a0d2-e03662fc7c1b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "handles data refreshing correctly",
              "fullTitle": "Dashboard API Integration handles data refreshing correctly",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Set up an intercept for a data refresh\ncy.intercept('GET', '/api/campaigns', {\n  statusCode: 200,\n  body: {\n    success: true,\n    campaigns: [{\n      id: 999,\n      campaignName: 'Refreshed Campaign',\n      submissionStatus: 'submitted',\n      platform: 'Instagram',\n      startDate: new Date().toISOString(),\n      endDate: new Date(Date.now() + 86400000 * 30).toISOString(),\n      totalBudget: 50000,\n      primaryKPI: 'Engagement'\n    }]\n  }\n}).as('refreshData');\n// Trigger a refresh (this might be a polling mechanism or a manual refresh)\n// Find some way to trigger a refresh - maybe clicking a refresh button if one exists\ncy.get('button').contains(/refresh|reload/i).click({\n  force: true\n});\n// Wait for the refresh to complete\ncy.wait('@refreshData');\n// Verify the new data appears\ncy.contains('Refreshed Campaign').should('exist');",
              "err": {},
              "uuid": "93642ad4-78fb-4f90-9848-9c909544a22f",
              "parentUUID": "65ed674e-d7d0-49dc-a0d2-e03662fc7c1b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "renders dashboard charts with API data",
              "fullTitle": "Dashboard API Integration renders dashboard charts with API data",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Check that charts are rendered with the mock data\ncy.get('[data-cy=\"chart-card\"]').should('exist');\n// Verify chart components have SVG elements\ncy.get('[data-cy=\"chart-card\"]').find('svg').should('exist');",
              "err": {},
              "uuid": "41a8c0c3-4fc1-40a0-a01e-80bf75e45a2d",
              "parentUUID": "65ed674e-d7d0-49dc-a0d2-e03662fc7c1b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "supports data filtering by timeframe",
              "fullTitle": "Dashboard API Integration supports data filtering by timeframe",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Set up an intercept for filtered data\ncy.intercept('GET', '/api/campaigns?timeframe=90d', {\n  fixture: 'dashboard/campaigns-90d.json',\n  statusCode: 200\n}).as('getFilteredData');\n// Select a different timeframe\ncy.get('select').select('Last 90 days');\n// Wait for the filtered data to load\ncy.wait('@getFilteredData');\n// Verify filtered data is displayed\n// This would depend on your mock data in the fixture\ncy.get('[data-cy=\"metric-card\"]').should('exist');",
              "err": {},
              "uuid": "31df669f-7f9c-480e-b382-d01c6b451039",
              "parentUUID": "65ed674e-d7d0-49dc-a0d2-e03662fc7c1b",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": ["2a7fd3d1-d4f3-4c54-9aaa-84eea64a6a35"],
          "pending": [],
          "skipped": [
            "b1ec1d2b-3f46-42e1-b983-d4bca81fac3c",
            "29c0a94c-56b7-48b9-ac38-6d09505a7e71",
            "e2f24fbb-c3a8-405f-84da-48faac6b981d",
            "7360419e-e3e7-48f4-a5b2-e44ee4e730e2",
            "93642ad4-78fb-4f90-9848-9c909544a22f",
            "41a8c0c3-4fc1-40a0-a01e-80bf75e45a2d",
            "31df669f-7f9c-480e-b382-d01c6b451039"
          ],
          "duration": 10500,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "cypress-report-[datetime]",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "config/cypress/reports",
        "overwrite": false,
        "html": false,
        "json": true,
        "timestamp": "isoDateTime",
        "reportFilename": "cypress-report-[datetime]"
      },
      "version": "6.2.0"
    }
  }
}
