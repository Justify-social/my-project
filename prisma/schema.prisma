// Main Schema
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Import other schemas
import "./schemas/campaign-wizard.prisma"

// ONE MAIN MODEL - NO RELATION HEADACHES
model Campaign {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  currentStep   Int       @default(1)
  status        Status    @default(DRAFT)

  // Relations - one campaign has one of each
  details       CampaignDetails?
  objectives    CampaignObjectives?
  audience      AudienceTargeting?
  creative      CreativeAssets?
  auditLog      AuditLog[]
}

// Simple audit log
model AuditLog {
  id          String    @id @default(uuid())
  campaign    Campaign  @relation(fields: [campaignId], references: [id])
  campaignId  String
  action      String
  changes     Json
  performedBy String
  timestamp   DateTime  @default(now())

  @@index([campaignId, timestamp])
}

// Main wizard model that tracks progress
model CampaignWizard {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  currentStep   Int       @default(1)
  status        Status    @default(DRAFT)
  
  // Store each step's data
  stepOne       StepOne?
  stepTwo       StepTwo?
  stepThree     StepThree?
  stepFour      StepFour?
  
  // Audit trail
  history       WizardHistory[]
}

// Step 1: Campaign Details
model StepOne {
  id               String    @id @default(uuid())
  wizard           CampaignWizard @relation(fields: [wizardId], references: [id])
  wizardId         String    @unique
  
  name             String    @db.VarChar(255)
  businessGoal     String    @db.Text
  startDate        DateTime
  endDate          DateTime
  timeZone         String
  contacts         Json      // {primary: {firstName, surname, email, position}, secondary: {...}}
  budget           Json      // {currency, totalBudget, socialMediaBudget}
  platform         Platform
  influencerHandle String    @db.VarChar(255)
  completed        Boolean   @default(false)
}

// Step 2: Objectives & Messaging
model StepTwo {
  id               String    @id @default(uuid())
  wizard           CampaignWizard @relation(fields: [wizardId], references: [id])
  wizardId         String    @unique

  primaryKPI       KPI
  secondaryKPIs    KPI[]
  messaging        Json      // {mainMessage, hashtags, brandPerception, keyBenefits}
  expectedOutcomes Json      // {achievements, purchaseIntent}
  features         Feature[]
  completed        Boolean   @default(false)
}

// Step 3: Audience Targeting
model StepThree {
  id               String    @id @default(uuid())
  wizard           CampaignWizard @relation(fields: [wizardId], references: [id])
  wizardId         String    @unique

  demographics     Json      // {ageDistribution, genderIdentities, languages}
  locations        Json[]    // Array of location objects
  targeting        Json      // {educationLevel, jobTitles, incomeRange, screeningQuestions}
  competitors      String[]
  completed        Boolean   @default(false)
}

// Step 4: Creative Assets
model StepFour {
  id               String    @id @default(uuid())
  wizard           CampaignWizard @relation(fields: [wizardId], references: [id])
  wizardId         String    @unique

  assets           Json[]    // Array of asset objects
  guidelines       String    @db.Text
  requirements     Json[]    // Array of requirement objects
  notes            String?   @db.Text
  completed        Boolean   @default(false)
}

// Track changes through the wizard
model WizardHistory {
  id          String    @id @default(uuid())
  wizard      CampaignWizard @relation(fields: [wizardId], references: [id])
  wizardId    String
  step        Int
  action      String    // SAVE_DRAFT, COMPLETE_STEP, etc.
  changes     Json
  performedBy String
  timestamp   DateTime  @default(now())

  @@index([wizardId, timestamp])
}

// Basic enums
enum Status {
  DRAFT
  IN_REVIEW
  APPROVED
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum Platform {
  INSTAGRAM
  YOUTUBE
  TIKTOK
}

enum KPI {
  AD_RECALL
  BRAND_AWARENESS
  CONSIDERATION
  MESSAGE_ASSOCIATION
  BRAND_PREFERENCE
  PURCHASE_INTENT
  ACTION_INTENT
  RECOMMENDATION_INTENT
  ADVOCACY
}

enum Feature {
  CREATIVE_ASSET_TESTING
  BRAND_LIFT
  BRAND_HEALTH
  MIXED_MEDIA_MODELING
}

// Enum for Currency types
enum Currency {
  GBP
  USD
  EUR
}

// Campaign Details Model
model CampaignDetails {
  id               String    @id @default(uuid())
  campaign         Campaign  @relation(fields: [campaignId], references: [id])
  campaignId       String    @unique

  name             String    @db.VarChar(255)
  businessGoal     String    @db.Text
  startDate        DateTime
  endDate          DateTime
  timeZone         String
  contacts         Json      // {primary: {firstName, surname, email, position}, secondary: {...}}
  budget           Json      // {currency, totalBudget, socialMediaBudget}
  platform         Platform
  influencerHandle String    @db.VarChar(255)
}

// Campaign Objectives Model
model CampaignObjectives {
  id               String    @id @default(uuid())
  campaign         Campaign  @relation(fields: [campaignId], references: [id])
  campaignId       String    @unique

  primaryKPI       KPI
  secondaryKPIs    KPI[]
  messaging        Json      // {mainMessage, hashtags, brandPerception, keyBenefits}
  expectedOutcomes Json      // {achievements, purchaseIntent}
  features         Feature[]
}

// Audience Targeting Model
model AudienceTargeting {
  id               String    @id @default(uuid())
  campaign         Campaign  @relation(fields: [campaignId], references: [id])
  campaignId       String    @unique

  demographics     Json      // {ageDistribution, genderIdentities, languages}
  locations        Json[]    // Array of location objects
  targeting        Json      // {educationLevel, jobTitles, incomeRange, screeningQuestions}
  competitors      String[]
}

// Creative Assets Model
model CreativeAssets {
  id               String    @id @default(uuid())
  campaign         Campaign  @relation(fields: [campaignId], references: [id])
  campaignId       String    @unique

  assets           Json[]    // Array of asset objects
  guidelines       String    @db.Text
  requirements     Json[]    // Array of requirement objects
  notes            String?   @db.Text
}

// Income Range Model
model IncomeRange {
  id                String           @id @default(uuid())
  min               Decimal
  max               Decimal
  currency          Currency
  targetingCriteria TargetingCriteria? @relation(fields: [targetingCriteriaId], references: [id])
  targetingCriteriaId String?        @unique

  campaign          CampaignWizard   @relation(fields: [campaignId], references: [id])
  campaignId        String
}

// Targeting Criteria Model
model TargetingCriteria {
  id                String           @id @default(uuid())
  educationLevel    String?
  jobTitles         String[]
  incomeRangeId     String?
  incomeRange       IncomeRange?     @relation(fields: [incomeRangeId], references: [id])
  screeningQuestions Json?

  campaign          CampaignWizard   @relation(fields: [campaignId], references: [id])
  campaignId        String
}

// Contact Model
model Contact {
  id          String   @id @default(uuid())
  firstName   String
  surname     String
  email       String
  position    String
  contactInfo ContactInfo[]
}

// Contact Info Model
model ContactInfo {
  id           String   @id @default(uuid())
  primaryId    String
  primary      Contact  @relation("PrimaryContact", fields: [primaryId], references: [id])
  secondaryId  String?
  secondary    Contact? @relation("SecondaryContact", fields: [secondaryId], references: [id])
}

// Location Model
model Location {
  id        String    @id @default(uuid())
  city      String?
  state     String?
  country   String
  audience  AudienceTargeting @relation(fields: [audienceId], references: [id])
  audienceId String
}

// Requirement Model
model Requirement {
  id          String   @id @default(uuid())
  type        String
  description String
  assets      CreativeAssets @relation(fields: [assetsId], references: [id])
  assetsId    String
}

