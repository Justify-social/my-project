name: Icon Standard Enforcement

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  check-icon-standards:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
      
      - name: Install icon-standards ESLint plugin
        run: |
          if [ ! -d "node_modules/eslint-plugin-icon-standards" ]; then
            mkdir -p node_modules/eslint-plugin-icon-standards
            cp -r config/eslint/plugins/eslint-plugin-icon-standards/* node_modules/eslint-plugin-icon-standards/
          fi
      
      - name: Check for FontAwesome imports
        run: |
          echo "::group::Running icon standards check"
          npx eslint --plugin=icon-standards --rule="icon-standards/no-fontawesome-direct-import:error" --format=stylish "src/**/*.{js,jsx,ts,tsx}"
          echo "::endgroup::"
        
      - name: Generate Icon Usage Report
        run: |
          echo "::group::Generating icon usage report"
          node scripts/icon-usage-audit.js --ci
          echo "::endgroup::"
      
      - name: Upload icon usage report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: icon-usage-report
          path: icon-usage-report.json
          
      - name: Add pull request comment with report summary
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            try {
              if (fs.existsSync('icon-usage-report.json')) {
                const report = JSON.parse(fs.readFileSync('icon-usage-report.json', 'utf8'));
                
                let comment = '## Icon Standards Check\n\n';
                
                if (report.violations.length === 0) {
                  comment += '✅ **No FontAwesome direct imports found!**\n\n';
                  comment += 'All icons are using the standard `Icon` component from `@/components/ui/atoms/icons`.\n';
                } else {
                  comment += '❌ **FontAwesome direct imports found!**\n\n';
                  comment += `${report.violations.length} files have direct FontAwesome imports that should be replaced.\n\n`;
                  
                  if (report.violations.length > 0) {
                    comment += '<details>\n';
                    comment += '<summary>Show violations</summary>\n\n';
                    
                    for (const violation of report.violations) {
                      comment += `**${violation.file}**\n`;
                      for (const instance of violation.instances) {
                        comment += `- Line ${instance.line}: \`${instance.code.trim()}\`\n`;
                        comment += `  - Replace with: \`${instance.recommendation}\`\n\n`;
                      }
                    }
                    
                    comment += '</details>\n\n';
                  }
                  
                  comment += 'Please replace direct FontAwesome imports with the `Icon` component.\n';
                  comment += 'See [Icon System Guide](docs/reference/ui/icon-system.md) for details.\n';
                }
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.error('Error creating comment:', error);
            } 