/**
 * This script generates a TypeScript file with all icon data embedded
 * for maximum performance and reliability.
 * 
 * Run this after downloading icons with download-icons.js
 * 
 * Usage:
 *   node scripts/generate-icon-data.js         # Normal mode
 *   node scripts/generate-icon-data.js --verbose   # Verbose mode with detailed logging
 */

const fs = require('fs');
const path = require('path');

// Process command line arguments
const args = process.argv.slice(2);
const isVerbose = args.includes('--verbose');

// Helper logging function
function log(message, isVerboseOnly = false) {
  if (!isVerboseOnly || isVerbose) {
    console.log(message);
  }
}

// Icon directories with SVG files
const ICON_DIRS = {
  solid: path.join(__dirname, '..', 'public', 'ui-icons', 'solid'),
  light: path.join(__dirname, '..', 'public', 'ui-icons', 'light'),
  brands: path.join(__dirname, '..', 'public', 'ui-icons', 'brands'),
  regular: path.join(__dirname, '..', 'public', 'ui-icons', 'regular')
};

// Output TypeScript file
const OUTPUT_FILE = path.join(__dirname, '..', 'src', 'components', 'ui', 'icons', 'icon-data.ts');

// Icon registry file
const REGISTRY_FILE = path.join(__dirname, '..', 'src', 'assets', 'icon-registry.json');

// Map of style prefixes to style folder names
const PREFIX_TO_STYLE = {
  'fas': 'solid',
  'fal': 'light',
  'fab': 'brands',
  'far': 'regular'
};

// Function to extract path data from SVG file
function extractSvgData(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  
  // Extract viewBox
  const viewBoxMatch = content.match(/viewBox="0 0 (\d+) (\d+)"/);
  if (!viewBoxMatch) {
    console.error(`Failed to extract viewBox from ${filePath}`);
    return null;
  }
  
  const width = parseInt(viewBoxMatch[1], 10);
  const height = parseInt(viewBoxMatch[2], 10);
  
  // Extract path data
  const pathMatch = content.match(/<path d="([^"]+)"/);
  if (!pathMatch) {
    console.error(`Failed to extract path data from ${filePath}`);
    return null;
  }
  
  const path = pathMatch[1];
  
  return { width, height, path };
}

// Main function
async function generateIconData() {
  log('Generating icon data...');
  
  // Check if registry file exists
  if (!fs.existsSync(REGISTRY_FILE)) {
    console.error(`Registry file ${REGISTRY_FILE} does not exist. Run download-icons.js first.`);
    process.exit(1);
  }
  
  // Check if at least one icon directory exists
  let hasAnyDir = false;
  for (const dir of Object.values(ICON_DIRS)) {
    if (fs.existsSync(dir)) {
      hasAnyDir = true;
      break;
    }
  }
  
  if (!hasAnyDir) {
    console.error(`None of the icon directories exist. Run download-icons.js first.`);
    process.exit(1);
  }
  
  // Read registry file
  const registry = JSON.parse(fs.readFileSync(REGISTRY_FILE, 'utf8'));
  
  // Generate icon data
  const iconData = {};
  let successCount = 0;
  let failCount = 0;
  
  for (const [iconName, info] of Object.entries(registry)) {
    const styleName = PREFIX_TO_STYLE[info.prefix] || 'solid';
    const svgFile = path.join(ICON_DIRS[styleName], `${info.name}.svg`);
    
    log(`Processing icon: ${iconName} (${info.prefix}/${info.name})`, true);
    
    if (!fs.existsSync(svgFile)) {
      log(`  ❌ SVG file ${svgFile} does not exist.`, true);
      failCount++;
      continue;
    }
    
    const svgData = extractSvgData(svgFile);
    if (!svgData) {
      log(`  ❌ Failed to extract SVG data from ${svgFile}`, true);
      failCount++;
      continue;
    }
    
    // Add URL to the data for direct access in browser
    svgData.url = `/ui-icons/${styleName}/${info.name}.svg`;
    
    log(`  ✅ Successfully extracted SVG data: ${svgData.width}x${svgData.height}`, true);
    log(`  📁 URL: ${svgData.url}`, true);
    
    iconData[iconName] = svgData;
    successCount++;
  }
  
  // Generate TypeScript file
  const tsContent = `/**
 * This file was automatically generated by generate-icon-data.js
 * Do not edit directly!
 */

export type IconName = ${Object.keys(iconData).map(name => `'${name}'`).join(' | ')};

export type IconData = {
  width: number;
  height: number;
  path: string;
  url: string;
};

export const iconData: Record<IconName, IconData> = ${JSON.stringify(iconData, null, 2)};
`;
  
  // Create output directory if it doesn't exist
  const outputDir = path.dirname(OUTPUT_FILE);
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }
  
  // Write TypeScript file
  fs.writeFileSync(OUTPUT_FILE, tsContent, 'utf8');
  
  log(`Successfully generated icon data for ${successCount} icons.`);
  if (failCount > 0) {
    log(`Failed to generate data for ${failCount} icons.`);
  }
  log(`Output file: ${OUTPUT_FILE}`);
}

// Run the function
generateIconData().catch(err => {
  console.error('Error generating icon data:', err);
  process.exit(1);
}); 