#!/usr/bin/env node
// scripts/generate-preview-pages.ts

import fs from 'fs';
import path from 'path';
// Assuming types are in the shared location, adjust path if necessary
import {
    type ComponentRegistry,
    type ExtendedComponentMetadata
} from '../src/app/(admin)/debug-tools/ui-components/types';

const REGISTRY_PATH = path.join(process.cwd(), 'public/static/component-registry.json');
const PREVIEW_BASE_DIR = path.join(process.cwd(), 'src/app/(admin)/debug-tools/ui-components/preview');
const COMPONENT_BASE_DIR = path.join(process.cwd(), 'src/components/ui'); // Base for calculating relative imports

/**
 * Generates the content string for a single component's preview page (page.tsx).
 */
function generatePageContent(component: ExtendedComponentMetadata): string {
    if (!component.filePath) {
        console.warn(`Skipping page generation for ${component.name} due to missing filePath.`);
        return '';
    }

    // --- Calculate Relative Import Path ---
    const componentFullPath = path.join(process.cwd(), component.filePath);
    const pageDir = path.join(PREVIEW_BASE_DIR, component.name);
    const pagePath = path.join(pageDir, 'page.tsx');
    const relativeImportPath = path.relative(pageDir, componentFullPath)
        .replace(/\\/g, '/')
        .replace(/\.tsx$/, '');

    // --- Prepare Metadata & Examples for JSON embedding ---
    const {
        name,
        description = '',
        category = 'unknown',
        subcategory,
        status,
        renderType,
        author,
        since,
        examples = []
    } = component;
    // Metadata object to embed
    const embeddedMeta = {
        name,
        description,
        category,
        subcategory,
        status,
        renderType,
        author,
        since,
    };
    // Escape examples appropriately for JSON embedding within a JS template literal
    const embeddedExamplesJson = JSON.stringify(examples.map(ex => ex.replace(/`/g, '\\\\`'))).replace(/\\$/g, '\\\\$');

    // --- Handle Component Naming for Import/Usage ---
    let importStatement: string;
    let componentAlias = name;
    const isValidIdentifier = /^[a-zA-Z_$][a-zA-Z0-9_$]*$/.test(name);

    if (isValidIdentifier) {
        // Standard named import
        importStatement = `import { ${name} } from '${relativeImportPath}';`;
        componentAlias = name; // Alias is the same as name
    } else {
        // Assume default export and create PascalCase alias for invalid names
        componentAlias = name.replace(/-([a-z])/g, (g) => g[1].toUpperCase())
            .replace(/^./, (g) => g.toUpperCase());
        if (!/^[a-zA-Z_$]/.test(componentAlias)) { componentAlias = `Comp${componentAlias}`; }
        importStatement = `import ${componentAlias} from '${relativeImportPath}';`; // Default import
    }

    // --- Generate Code String --- 
    const content = `// AUTO-GENERATED by scripts/generate-preview-pages.ts - DO NOT EDIT MANUALLY!\n// Timestamp: ${new Date().toISOString()}\n\nimport React from 'react';\nimport Link from 'next/link';\nimport { cn } from '@/lib/utils';\n${status && name !== 'Badge' ? `import { Badge } from "@/components/ui/badge";` : ''}\n${importStatement}\n\nconst statusStyles: Record<string, string> = {\n  stable: 'bg-green-100 text-green-800 border-green-200',\n  beta: 'bg-yellow-100 text-yellow-800 border-yellow-200',\n  deprecated: 'bg-red-100 text-red-800 border-red-200',\n  development: 'bg-blue-100 text-blue-800 border-blue-200',\n};\n\nexport default function ${componentAlias}PreviewPage() {\n  const componentMeta = ${JSON.stringify(embeddedMeta, null, 2)};\n  const examples: string[] = ${embeddedExamplesJson};\n\n  return (\n    <div className="container mx-auto px-4 py-8">\n      {/* Breadcrumbs */}\n      <nav aria-label="Breadcrumb" className="mb-6 text-sm text-secondary">\n        <ol className="list-none p-0 inline-flex space-x-2">\n          <li className="flex items-center"><Link href="/debug-tools/ui-components" className="hover:text-Interactive">UI Components</Link></li>\n          <li className="flex items-center"><span className="mx-2">/</span><span className="capitalize">{componentMeta.category}</span></li>\n          {componentMeta.subcategory && <li className="flex items-center"><span className="mx-2">/</span><span className="capitalize">{componentMeta.subcategory}</span></li>}\n          <li className="flex items-center"><span className="mx-2">/</span><span className="font-medium text-primary">{componentMeta.name}</span></li>\n        </ol>\n      </nav>\n\n      {/* Header Section */}\n      <div className="mb-8 border-b border-divider pb-4">\n        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">\n          <h1 className="text-3xl font-bold text-primary mb-2 sm:mb-0">{componentMeta.name}</h1>\n          <div className="flex items-center space-x-3 text-sm">\n            {componentMeta.status && (\n              <Badge variant="outline" className={cn('font-medium', statusStyles[componentMeta.status] || statusStyles.development)}>{componentMeta.status}</Badge>\n            )}\n            <span className="text-secondary capitalize">({componentMeta.renderType || 'N/A'})</span>\n          </div>\n        </div>\n        {componentMeta.description && <p className="mt-2 text-secondary max-w-3xl">{componentMeta.description}</p>}\n        <div className="mt-3 flex flex-wrap gap-x-6 gap-y-1 text-xs text-muted-foreground">\n          {componentMeta.author && <span>Author: {componentMeta.author}</span>}\n          {componentMeta.since && <span>Since: {componentMeta.since}</span>}\n        </div>\n      </div>\n\n      {/* Examples Section (Rendering the actual component) */}\n      <div className="mb-8">\n        <h2 className="text-xl font-semibold mb-4 text-primary">Examples / Usage</h2>\n        <div className="space-y-6">\n          {/* ---- ADD YOUR RENDERING EXAMPLES MANUALLY BELOW ---- */}\n          {/* Example 1: Basic Usage Placeholder */}\n          <div className="border border-divider rounded-lg p-6">\n            <h3 className="text-lg font-medium mb-3">Basic Usage</h3>\n            {/* <${componentAlias} /> */}\n            <p className="text-sm text-muted-foreground">(Manually add rendering example for <${componentAlias} /> here)</p>\n          </div>\n          {/* Example 2: Add more placeholders or examples as needed */}\n          {/* ---- END MANUAL EXAMPLES ---- */}\n        </div>\n      </div>\n\n      {/* Code Snippets Section */}\n      {examples && examples.length > 0 && (\n        <div className="mb-8">\n          <h2 className="text-xl font-semibold mb-4 text-primary">Code Snippets</h2>\n          <div className="space-y-4">\n            {examples.map((exampleCode: string, index: number) => (\n              <div key={index} className="border border-divider rounded-lg overflow-hidden">\n                <pre className="text-sm p-4 bg-gray-50 text-gray-800 overflow-x-auto">\n                  <code>{\`${'${exampleCode}'}\`}</code>\n                </pre>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n    </div>\n  );\n}\n`;

    return content;
}

/**
 * Main function to generate all preview pages.
 */
async function run() {
    console.log('Generating static preview pages...');
    try {
        // 1. Read the generated registry
        if (!fs.existsSync(REGISTRY_PATH)) {
            throw new Error(`Component registry not found at ${REGISTRY_PATH}. Run build-component-registry script first.`);
        }
        const registryContent = fs.readFileSync(REGISTRY_PATH, 'utf-8');
        const registry: ComponentRegistry = JSON.parse(registryContent);

        if (!registry || !registry.components) {
            throw new Error(`Invalid component registry format in ${REGISTRY_PATH}.`);
        }

        // 2. Ensure base preview directory exists
        if (!fs.existsSync(PREVIEW_BASE_DIR)) {
            fs.mkdirSync(PREVIEW_BASE_DIR, { recursive: true });
            console.log(`Created base directory: ${PREVIEW_BASE_DIR}`);
        }

        // 3. Iterate and generate pages
        let generatedCount = 0;
        for (const component of registry.components) {
            // Use component name for directory, ensure it's valid
            const componentDirName = component.name; // Assuming name is valid for directory
            if (!componentDirName) {
                console.warn(`Skipping component due to missing name: ${JSON.stringify(component)}`);
                continue;
            }

            const componentDir = path.join(PREVIEW_BASE_DIR, componentDirName);
            const pagePath = path.join(componentDir, 'page.tsx');

            // Ensure component-specific directory exists
            if (!fs.existsSync(componentDir)) {
                fs.mkdirSync(componentDir, { recursive: true });
            }

            // Generate page content
            const pageContent = generatePageContent(component);
            if (!pageContent) continue; // Skip if content generation failed

            // Write the file
            fs.writeFileSync(pagePath, pageContent, 'utf-8');
            generatedCount++;
            // console.log(`   Generated: ${pagePath}`); // Keep logging minimal
        }

        console.log(`✅ Generated/Updated ${generatedCount} preview pages in ${PREVIEW_BASE_DIR}`);

    } catch (error) {
        console.error('❌ Error generating preview pages:', error);
        process.exit(1); // Exit with error code
    }
}

run(); 